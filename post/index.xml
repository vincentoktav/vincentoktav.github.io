<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Vincent Oktavianus</title>
    <link>/post/</link>
      <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Vincent Oktavianus, 2020</copyright><lastBuildDate>Sat, 06 Jun 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Posts</title>
      <link>/post/</link>
    </image>
    
    <item>
      <title>Predicting Airbnb house prices</title>
      <link>/post/airbnb-house-regression/</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/post/airbnb-house-regression/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;load-library&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;em&gt;Load Library&lt;/em&gt;&lt;/h1&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;abstract&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Abstract&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Most individuals who sleep at their destination would need a “home away from home.” Businesses have always taken care of that. But Airbnb gave the market a fresh and exciting twist. variety of learning techniques were explored and validated, but ultimately the predictive power of the models appears to be limited by the available data. Additional data collection is recommended.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;When you are away from home for business or pleasure, it is essential that you have a place to relax and rest. &lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; The days of calling hotels and comparing rates over the phone are gone for a long time, and using applications to locate, compare, and book hotels or private residences is the way of the present. &lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Airbnb, one of the many options that allow you to rent a personal home or a room in someone else’s house, offering an incredible experience ranging from traditional hotels to luxury mansions. You can read other guest reviews within the app, interact safely with estate owners, and much more. Moreover, you can even list your space and become hospitality entrepreneurs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; As Airbnb popularity rises among the public, many including the company itself use the data to find out more about hosts, geographical availability, necessary metrics to make predictions and draw conclusions. Many variables can affect the rental price of an Airbnb listing. However, is it beneficial to predict a rental price? And will be it enough to use only a limited amount of numerical and categorical metrics such as the data provided via Kaggle to estimate the price of rentals?&lt;/p&gt;
&lt;p&gt;Statistical learning techniques were applied to several listings from Airbnb in New York during 2019. All variables including name, location, room type, and the number of reviews were used to predict the price of rentals. The results indicate that this prediction is almost impossible to make due to a large amount of error. The importance of predicting the price and statistical limitations suggest the need for further investigation.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;methods&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Methods&lt;/h1&gt;
&lt;div id=&#34;data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data&lt;/h2&gt;
&lt;p&gt;The data was accessed via Kaggle. &lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; It contains information on Airbnb listings in New York, NY during 2019 including price, rental attributes, and location. For the purposes of this analysis, the data was restricted to short term (one week or less) rentals in Brooklyn that rent for less than $1000 a night. (Additionally, only rentals that have been reviewed are included.)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;airbnb = read_csv(file = &amp;quot;data/AB_NYC_2019.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;brooklyn = airbnb %&amp;gt;% 
  filter(minimum_nights &amp;lt;= 7) %&amp;gt;%
  filter(neighbourhood_group == &amp;quot;Brooklyn&amp;quot;) %&amp;gt;% 
  filter(number_of_reviews &amp;gt; 0) %&amp;gt;%
  filter(price &amp;gt; 0, price &amp;lt; 1000) %&amp;gt;% 
  na.omit() %&amp;gt;% 
  select(latitude, longitude, room_type, price, minimum_nights, number_of_reviews, 
         reviews_per_month, calculated_host_listings_count, availability_365) %&amp;gt;% 
  mutate(room_type = as.factor(room_type))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(42)
# test-train split
bk_tst_trn_split = initial_split(brooklyn, prop = 0.80)
bk_trn = training(bk_tst_trn_split)
bk_tst = testing(bk_tst_trn_split)
# estimation-validation split
bk_est_val_split = initial_split(bk_trn, prop = 0.80)
bk_est = training(bk_est_val_split)
bk_val = testing(bk_est_val_split)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;modeling&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Modeling&lt;/h2&gt;
&lt;p&gt;In order to predict the price of rentals, three modeling techniques were considered: linear models, k-nearest neighbors models, and decision tree models.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linear models with and without log transformed responses were considered. Various subsets of predictors, with and without interaction terms were explored.&lt;/li&gt;
&lt;li&gt;k-nearest neighbors models were trained using all available predictor variables. The choice of k was chosen using a validation set.&lt;/li&gt;
&lt;li&gt;Decision tree models were trained using all available predictors. The choice of the complexity parameter was chosen using a validation set.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fit1 = lm(price ~ ., data = bk_est)
fit2 = step(fit1, direction = &amp;quot;backward&amp;quot;)
fit3 = step(lm(price ~ . ^ 2, data = bk_est), direction = &amp;quot;backward&amp;quot;)
fit4 = lm(log(price) ~ ., data = bk_est)
fit5 = step(lm(log(price) ~ ., data = bk_est), direction = &amp;quot;backward&amp;quot;)
fit6 = step(lm(log(price) ~ . ^ 2, data = bk_est), direction = &amp;quot;backward&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;k = 1:100
knn_mods = map(k, ~knnreg(price ~ ., data = bk_est, k = .x))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cp = c(1.000, 0.100, 0.010, 0.001, 0)
tree_mods = map(cp, ~rpart(price ~ ., data = bk_est, cp = .x))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;evaluation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;To evaluate the ability to predict rental prices, the data was split into estimation, validation, and testing sets. Error metrics and graphics are reported using the validation data in the Results section.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;calc_rmse = function(actual, predicted) {
  sqrt(mean( (actual - predicted) ^ 2) )
}

calc_rmse_model = function(model, data, response) {
  actual = data[[response]]
  predicted = predict(model, data)
  sqrt(mean((actual - predicted) ^ 2))
}

calc_rmse_log_model = function(model, data, response) {
  actual = data[[response]]
  predicted = exp(predict(model, data))
  sqrt(mean((actual - predicted) ^ 2))
}&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;results&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Results&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rmse_lm1 = calc_rmse(actual = bk_val$price, predicted = predict(fit1, bk_val))
rmse_lm2 = calc_rmse(actual = bk_val$price, predicted = predict(fit2, bk_val))
rmse_lm3 = calc_rmse(actual = bk_val$price, predicted = predict(fit3, bk_val))
rmse_lm4 = calc_rmse_log_model(model = fit4, data = bk_val, response = &amp;quot;price&amp;quot;)
rmse_lm5 = calc_rmse_log_model(model = fit5, data = bk_val, response = &amp;quot;price&amp;quot;)
rmse_lm6 = calc_rmse_log_model(model = fit6, data = bk_val, response = &amp;quot;price&amp;quot;)
lm_val_rmse = c(rmse_lm1, rmse_lm2, rmse_lm3)
log_lm_rmse = c(rmse_lm4, rmse_lm5, rmse_lm6)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knn_preds = map(knn_mods, predict, bk_val)
knn_val_rmse = map_dbl(knn_preds, calc_rmse, actual = bk_val$price)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tree_preds = map(tree_mods, predict, bk_val)
tree_val_rmse = map_dbl(tree_preds, calc_rmse, actual = bk_val$price)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble(
  &amp;quot;Model&amp;quot; = c(&amp;quot;Linear&amp;quot;, &amp;quot;Log Linear&amp;quot;, &amp;quot;KNN&amp;quot;, &amp;quot;Decision Tree&amp;quot;),
  &amp;quot;Tuning&amp;quot; = c(&amp;quot;Subset of Interactions&amp;quot;, &amp;quot;Subset of Interactions&amp;quot;, &amp;quot;k = 44&amp;quot;, &amp;quot;cp = 0.001&amp;quot;),
  &amp;quot;Validation RMSE&amp;quot; = c(lm_val_rmse[which.min(lm_val_rmse)],
                        log_lm_rmse[which.min(log_lm_rmse)],
                        knn_val_rmse[which.min(knn_val_rmse)],
                        tree_val_rmse[which.min(tree_val_rmse)])
) %&amp;gt;% 
  kable(digits = 2) %&amp;gt;% 
  kable_styling(&amp;quot;striped&amp;quot;, full_width = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table table-striped&#34; style=&#34;width: auto !important; margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Model
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Tuning
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Validation RMSE
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Linear
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Subset of Interactions
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
66.29
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Log Linear
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Subset of Interactions
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
66.62
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
KNN
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
k = 44
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
81.40
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Decision Tree
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
cp = 0.001
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
69.02
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow = c(1, 3))

axis_limits = c(0, 900)

plot(predict(fit3, bk_val), bk_val$price,
     xlim = axis_limits, ylim = axis_limits, pch = 19, col = &amp;quot;red&amp;quot;,
     xlab = &amp;quot;Predicted&amp;quot;, ylab = &amp;quot;Actual&amp;quot;, 
     main = &amp;quot;Model: Linear | Data: Validation&amp;quot;)
abline(a = 0, b = 1, col = &amp;quot;grey&amp;quot;)
grid()

plot(predict(knn_mods[[44]], bk_val), bk_val$price,
     xlim = axis_limits, ylim = axis_limits, pch = 19, col = &amp;quot;lightblue&amp;quot;,
     xlab = &amp;quot;Predicted&amp;quot;, ylab = &amp;quot;Actual&amp;quot;, 
     main = &amp;quot;Model: KNN | Data: Validation&amp;quot;)
abline(a = 0, b = 1, col = &amp;quot;grey&amp;quot;)
grid()

plot(predict(tree_mods[[4]], bk_val), bk_val$price,
     xlim = axis_limits, ylim = axis_limits, pch = 19, col = &amp;quot;green&amp;quot;,
     xlab = &amp;quot;Predicted&amp;quot;, ylab = &amp;quot;Actual&amp;quot;, 
     main = &amp;quot;Model: Tree | Data: Validation&amp;quot;)
abline(a = 0, b = 1, col = &amp;quot;grey&amp;quot;)
grid()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/AirBnB-pricing-predict/index_files/figure-html/graphical-results-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;discussion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Discussion&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm_mod = step(lm(price ~ . ^ 2, data = bk_trn), direction = &amp;quot;backward&amp;quot;)
tst_rmse = calc_rmse(actual = bk_tst$price, predicted = predict(lm_mod, bk_tst))
tst_rmse&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given the results of assessing model performance on the validation data, the linear model that selects from all available predictors, as well as all two-way interactions using backwards selection and AIC appears to be a reasonable choice. Using the test data, we obtain a RMSE of 72.626 dollars. While the range of prices seen in this data, ranging from roughly 0 to 10,000 dollars, with most observations greater than 50 dollars and less than 200 dollars (from the box plot of room_type versus price), this seems to suggest our model is performing badly at the prediction task.&lt;/p&gt;
&lt;p&gt;The provided dataset may be the limiting factor in this analysis. Even with limited domain knowledge, it should be rather clear that the attributes of the rentals are extremely lacking. There are many more variables that might be more helpful in predicting rental prices such as house rules, amenities, cancellation policy, number of positive and ne. It turns out that Airbnb actually releases much more information than is re-hosted on Kaggle. We will use the complete data in our next analysis.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;appendix&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Appendix&lt;/h1&gt;
&lt;div id=&#34;data-dictionary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Dictionary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;latitude&lt;/code&gt; - latitude coordinates of the listing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;longitude&lt;/code&gt; - longitude coordinates of the listing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;room_type&lt;/code&gt; - listing space type&lt;/li&gt;
&lt;li&gt;&lt;code&gt;price&lt;/code&gt; - price in dollars&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minimum_nights&lt;/code&gt; - amount of nights minimum&lt;/li&gt;
&lt;li&gt;&lt;code&gt;number_of_reviews&lt;/code&gt; - number of reviews&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reviews_per_month&lt;/code&gt; - number of reviews per month&lt;/li&gt;
&lt;li&gt;&lt;code&gt;calculated_host_listings_count&lt;/code&gt; - amount of listing per host&lt;/li&gt;
&lt;li&gt;&lt;code&gt;availability_365&lt;/code&gt; - number of days when listing is available for booking&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For additional background on the data, see the data source on Kaggle.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;eda&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;EDA&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_1 = bk_trn %&amp;gt;% 
  ggplot(aes(x = price)) + 
  geom_histogram(bins = 30)

plot_2 = bk_trn %&amp;gt;% 
  ggplot(aes(x = room_type, y = price, colour = price)) + 
  geom_boxplot()

plot_3 = bk_trn %&amp;gt;% 
  ggplot(aes(x = reviews_per_month, y = price)) + 
  geom_point() + geom_smooth(span = 0.3)

gridExtra::grid.arrange(plot_1, plot_2, plot_3, ncol = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/AirBnB-pricing-predict/index_files/figure-html/eda-plots-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bk_trn %&amp;gt;% 
  ggplot(aes(x = longitude, y = latitude, colour = price)) + 
  geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/AirBnB-pricing-predict/index_files/figure-html/price-map-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://www.imore.com/best-apps-finding-place-stay&#34;&gt;Best Apps for Finding a Place to Stay&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://press.airbnb.com/about-us/&#34;&gt;About Airbnb&lt;/a&gt;&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://muchneeded.com/airbnb-statistics/&#34;&gt;Statistics of Airbnb&lt;/a&gt;&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://www.kaggle.com/dgomonov/new-york-city-airbnb-open-data&#34;&gt;New York City Airbnb Open Data&lt;/a&gt;&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Visualization with Pokemon</title>
      <link>/post/visualization-with-pokemon/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/post/visualization-with-pokemon/</guid>
      <description>


&lt;div id=&#34;load-library&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;em&gt;Load Library&lt;/em&gt;&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ──&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ✔ ggplot2 3.2.1     ✔ purrr   0.3.3
## ✔ tibble  2.1.3     ✔ dplyr   0.8.3
## ✔ tidyr   1.0.0     ✔ stringr 1.4.0
## ✔ readr   1.3.1     ✔ forcats 0.4.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Conflicts ───────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gridExtra)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;gridExtra&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following object is masked from &amp;#39;package:dplyr&amp;#39;:
## 
##     combine&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggrepel)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data&#34; class=&#34;section level1 tabset tabset-fade tabset-pills&#34;&gt;
&lt;h1&gt;&lt;em&gt;Data&lt;/em&gt;&lt;/h1&gt;
&lt;p&gt;Data was obtained and accessed via &lt;a href=&#34;https://www.kaggle.com/abcsds/Pokemon&#34;&gt;Kaggle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;According to the source, the data was collected from 3 different sites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.Pokemon.com/us/pokedex/&#34;&gt;Pokemon.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://Pokemondb.net/pokedex&#34;&gt;Pokemondb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bulbapedia.bulbagarden.net/wiki/List_of_Pok%C3%A9mon_by_National_Pok%C3%A9dex_number&#34;&gt;bulbapedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;About&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This data set includes 721 Pokemon, including their ID number, name, first and second type, and basic stats: HP, Attack, Defense, Special Attack, Special Defense, and Speed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Imporatnt note: There are Pokemons that share the same ID number with a different evolution (mega evolution or alternative evolution). Thus, there are 800 observations in this dataset while there are only 721 Pokemon.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This are the raw attributes that are used for calculating how much damage an attack will do in the games. This dataset is about the Pokemon games (NOT Pokemon cards or Pokemon Go).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;read-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Read Data&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Pokemon =  read_csv(&amp;quot;data/Pokemon.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   `#` = col_double(),
##   Name = col_character(),
##   `Type 1` = col_character(),
##   `Type 2` = col_character(),
##   Total = col_double(),
##   HP = col_double(),
##   Attack = col_double(),
##   Defense = col_double(),
##   `Sp. Atk` = col_double(),
##   `Sp. Def` = col_double(),
##   Speed = col_double(),
##   Generation = col_double(),
##   Legendary = col_logical()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;skim-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Skim Data&lt;/h2&gt;
&lt;p&gt;Check for missing data and the distributions of each numeric variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;skimr::skim(Pokemon)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:skim-data&#34;&gt;Table 1: &lt;/span&gt;Data summary&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Name&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Pokemon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Number of rows&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Number of columns&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;_______________________&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Column type frequency:&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;character&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;logical&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;________________________&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Group variables&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Variable type: character&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;skim_variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_missing&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;complete_rate&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;min&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;empty&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_unique&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;whitespace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Name&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;800&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Type 1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Type 2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;386&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Variable type: logical&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;skim_variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_missing&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;complete_rate&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Legendary&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.08&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FAL: 735, TRU: 65&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Variable type: numeric&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;skim_variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_missing&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;complete_rate&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sd&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p0&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p25&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p50&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p75&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p100&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;hist&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;#&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;362.81&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;208.34&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;184.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;364.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;539.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;721&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▇▇▇▇&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Total&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;435.10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;119.96&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;180&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;330.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;450.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;515.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;780&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▆▇▂▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;HP&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;69.26&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.53&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;65.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;255&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▇▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Attack&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;79.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;32.46&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;75.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;100.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;190&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▂▇▆▂▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Defense&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;73.84&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31.18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;90.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;230&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▇▂▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Sp. Atk&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;72.82&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;32.72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;65.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;95.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;194&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▅▇▅▂▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Sp. Def&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;71.90&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27.83&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;90.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;230&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▇▂▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Speed&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;68.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29.06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;65.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;90.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;180&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▇▆▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Generation&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.66&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▅▃▅▂&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;data-dictionary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Dictionary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt; - ID for each Pokemon&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name&lt;/code&gt; - Name of each Pokemon&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Type 1&lt;/code&gt; - Each Pokemon has a type, this determines weakness/resistance to attacks (Primary type)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Type 2&lt;/code&gt; - Some Pokemon are dual type and have 2 (Secondary type), missing value means the Pokemon only has one type of element/attribute&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Total&lt;/code&gt; - sum of all stats that come after this, a general guide to how strong a Pokemon is (overall stats)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HP&lt;/code&gt; - hit points, or health, defines how much damage a Pokemon can withstand before fainting&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Attack&lt;/code&gt; - the base modifier for normal attacks (eg. Scratch, Punch)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Defense&lt;/code&gt; - the base damage resistance against normal attacks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SP Atk&lt;/code&gt; - special attack, the base modifier for special attacks (e.g. fire blast, bubble beam)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SP Def&lt;/code&gt; - the base damage resistance against special attacks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Speed&lt;/code&gt; - determines which Pokemon attacks first each round&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Generation&lt;/code&gt; - the generation it came from&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Legendary&lt;/code&gt; - True if Legendary Pokemon False if not&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::kable(head(Pokemon))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;#&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Type 1&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Type 2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Total&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;HP&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Attack&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Defense&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Sp. Atk&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Sp. Def&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Speed&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Generation&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Legendary&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Bulbasaur&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Grass&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Poison&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;318&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;65&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;65&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ivysaur&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Grass&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Poison&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;405&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;60&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;63&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;60&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Venusaur&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Grass&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Poison&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;525&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;82&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;83&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;VenusaurMega Venusaur&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Grass&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Poison&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;625&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;123&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;122&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Charmander&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fire&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;309&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;43&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;60&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;65&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Charmeleon&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fire&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;405&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;58&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;58&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;65&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;data-manipulation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Manipulation&lt;/h2&gt;
&lt;p&gt;From the skim function, we see the variable &lt;code&gt;Generation&lt;/code&gt; as a numeric variable which is wrong. The correct type for it is factor or categorical data, thus, we will have to manipulate the data to fix the issue.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Pokemon$Generation = as_factor(Pokemon$Generation)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also want to rename a few variables here for usage purposes here in R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Pokemon = Pokemon %&amp;gt;% 
  rename(no = &amp;#39;#&amp;#39;, 
         type1 = `Type 1`,
         type2 = `Type 2`,
         spatk = `Sp. Atk`,
         spdef = `Sp. Def`) &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;questions-visualization&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;em&gt;Questions &amp;amp; Visualization&lt;/em&gt;&lt;/h1&gt;
&lt;div id=&#34;which-primary-pokemon-type-type-1-and-secondary-pokemon-type-type-2-is-the-most-common&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;1. Which primary Pokemon type (&lt;code&gt;Type 1&lt;/code&gt;) and secondary Pokemon type (&lt;code&gt;Type 2&lt;/code&gt;) is the most common?&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Pokemon %&amp;gt;% 
  ggplot() +
  geom_bar(aes(x = fct_infreq(type1)), fill = &amp;quot;red&amp;quot;, colour = &amp;quot;black&amp;quot;) +
  labs(x = &amp;quot;Primary Type&amp;quot;, y = &amp;quot;Frequency&amp;quot;, title = &amp;quot;Barplot for `Type 1` Pokemon&amp;quot;) +
  theme(axis.text.x = element_text(angle = 30)) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-15-visualization-with-pokemon/index_files/figure-html/plot-1a-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;From the plot above, we can see that &lt;strong&gt;Water&lt;/strong&gt; is the most common primary type in Pokemon.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Follow-up question:
&lt;ul&gt;
&lt;li&gt;Is something wrong with the data? Why Flying type is almost non-existent?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Pokemon %&amp;gt;% 
  ggplot() +
  geom_bar(aes(x = fct_infreq(type2)), fill = &amp;quot;lightblue&amp;quot;, colour = &amp;quot;black&amp;quot;) +
  labs(x = &amp;quot;Secondary Type&amp;quot;, y = &amp;quot;Frequency&amp;quot;, title = &amp;quot;Barplot for `Type 2` Pokemon&amp;quot;) +
  theme(axis.text.x = element_text(angle = 30)) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-15-visualization-with-pokemon/index_files/figure-html/plot-1b-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;From the plot above, it is clear that most Pokemon do not have a secondary element or type. If we refer back to the data dictionary, missing values in the &lt;code&gt;Type 2&lt;/code&gt; variable means that the Pokemon only has one attribute or element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Answer to follow-up question from part A:
&lt;ul&gt;
&lt;li&gt;Flying-type is more commonly used for the secondary type. Thus, dual-type (having 2 types) Pokemon are more often to have Flying as their second type.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;what-is-the-most-common-type-combination-in-pokemon-the-most-combined-type-have-dual-types&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;2. What is the most common type combination in Pokemon? (the most combined type / have dual-types)&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# count frequency of each type combination
mixed = Pokemon %&amp;gt;%
  group_by(type1, type2) %&amp;gt;%
  summarise(count = n()) 

# create contingency table of `Type 1` &amp;amp; `Type 2`
mixed %&amp;gt;% 
ggplot(aes(x = type1, y = type2)) +
  geom_tile(aes(fill = count), show.legend = FALSE) +
  geom_text(aes(label = count)) +
  labs(x = &amp;quot;Type 1&amp;quot;, y = &amp;quot;Type 2&amp;quot;,
       title = &amp;quot;Number of Pokemon for each type combination&amp;quot;) +  
  theme(axis.text.x = element_text(angle = 30)) +
  scale_fill_gradient(low = &amp;quot;white&amp;quot;, high = &amp;quot;blue&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-15-visualization-with-pokemon/index_files/figure-html/plot-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;From the contingency table above, we can see that the most common dual-type Pokemon is &lt;em&gt;normal &amp;amp; flying&lt;/em&gt; with 24 Pokemon. We are ignoring the top row value which is the row for Pokemon that only has one element (primary type only).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;are-legendary-pokemon-have-better-stats-in-terms-of-hp-attack-defense-special-attack-special-defense-speed-and-total-than-the-normal-ones&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;3. Are Legendary Pokemon have better Stats (in terms of &lt;code&gt;HP&lt;/code&gt;, &lt;code&gt;Attack&lt;/code&gt;, &lt;code&gt;Defense&lt;/code&gt;, &lt;code&gt;Special Attack&lt;/code&gt;, &lt;code&gt;Special Defense&lt;/code&gt;, &lt;code&gt;Speed&lt;/code&gt;, and &lt;code&gt;Total&lt;/code&gt;) than the normal ones?&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Density plot of HP
p01 = Pokemon %&amp;gt;% 
  ggplot(aes(x = HP, fill = Legendary)) +
  geom_density() +
  labs(x = &amp;quot;HP&amp;quot;, y = &amp;quot;Density&amp;quot;) +
  theme_bw() +
  theme(legend.position = &amp;quot;none&amp;quot;)

# Density plot of Attack
p02 = Pokemon %&amp;gt;% 
  ggplot(aes(x = Attack, fill = Legendary)) +
  geom_density() +
  labs(x = &amp;quot;Attack&amp;quot;, y = &amp;quot;Density&amp;quot;) +
  theme_bw() +
  theme(legend.position = &amp;quot;none&amp;quot;)

# Density plot of Defense
p03 = Pokemon %&amp;gt;% 
  ggplot(aes(x = Defense, fill = Legendary)) +
  geom_density() +
  labs(x = &amp;quot;Defense&amp;quot;, y = &amp;quot;Density&amp;quot;) +
  theme_bw() +
  theme(legend.position = &amp;quot;none&amp;quot;)

# Density plot of Special Attack
p04 = Pokemon %&amp;gt;% 
  ggplot(aes(x = spatk, fill = Legendary)) +
  geom_density() +
  labs(x = &amp;quot;Special Attack&amp;quot;, y = &amp;quot;Density&amp;quot;) +
  theme_bw() +
  theme(legend.position = &amp;quot;none&amp;quot;)

# Density plot of Special Defense
p05 = Pokemon %&amp;gt;% 
  ggplot(aes(x = spdef, fill = Legendary)) +
  geom_density() +
  labs(x = &amp;quot;Special Defense&amp;quot;, y = &amp;quot;Density&amp;quot;) +
  theme_bw() +
  theme(legend.position = &amp;quot;none&amp;quot;)

# Density plot of Speed
p06 = Pokemon %&amp;gt;% 
  ggplot(aes(x = Speed, fill = Legendary)) +
  geom_density() +
  labs(x = &amp;quot;Speed&amp;quot;, y = &amp;quot;Density&amp;quot;) +
  theme_bw() +
  theme(legend.position = &amp;quot;none&amp;quot;)

# Density plot of Total
p07 = Pokemon %&amp;gt;% 
  ggplot(aes(x = Total, fill = Legendary)) +
  geom_density() +
  labs(x = &amp;quot;Total&amp;quot;, y = &amp;quot;Density&amp;quot;) +
  theme_bw() 

# Print out all plots
grid.arrange(p01, p02, p03, p04, p05, p06, p07,layout_matrix = cbind(c(1,4,7), c(2,5,7), c(3,6,7)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-15-visualization-with-pokemon/index_files/figure-html/plots-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;From the plots that we produced above, it is clear that legendary Pokemon &lt;strong&gt;are better&lt;/strong&gt; (have greater stats) than the normal ones. The legendary Pokemon are better in terms of all Stats (&lt;code&gt;HP&lt;/code&gt;, &lt;code&gt;Attack&lt;/code&gt;, &lt;code&gt;Defense&lt;/code&gt;, &lt;code&gt;Special Attack&lt;/code&gt;, &lt;code&gt;Special Defense&lt;/code&gt;, &lt;code&gt;Speed&lt;/code&gt;, and &lt;code&gt;Total&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;which-pokemon-generation-have-a-better-overall-stats-total&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;4. Which Pokemon generation have a better overall stats (&lt;code&gt;Total&lt;/code&gt;)?&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Pokemon %&amp;gt;%
  group_by(Generation) %&amp;gt;%
  summarize(Total = mean(Total)) %&amp;gt;%
  ggplot(aes(x = Generation, y = Total, group = 1)) +
  geom_line(colour = &amp;quot;yellow2&amp;quot;) +
  geom_point() +
  labs(y=&amp;quot;Average Total&amp;quot;, title=&amp;quot;Average Stats Total of Pokemon in each generation&amp;quot;) +
  theme_dark() &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-15-visualization-with-pokemon/index_files/figure-html/plot-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;From the plot above, we see the &lt;em&gt;fourth generation&lt;/em&gt; has the best overall total stats Pokemon. This means the Pokemon that came from the fourth generation has better stats than the others.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Follow-up question:
&lt;ul&gt;
&lt;li&gt;Is the result here is affected by the number of legendary Pokemon in the fourth generation?
&lt;ul&gt;
&lt;li&gt;Answer in the next question.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;which-generation-has-the-most-legendary-pokemon&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;5. Which generation has the most legendary Pokemon?&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Pokemon %&amp;gt;% 
  ggplot(aes(x = Generation, fill = Legendary)) + 
  geom_bar(position=&amp;quot;dodge&amp;quot;) +
  geom_text(aes(label = ..count..), stat = &amp;quot;count&amp;quot;, position = position_dodge(0.9), vjust = -0.4) +
  labs(x = &amp;quot;Generation&amp;quot;, y = &amp;quot;Number of Pokemon&amp;quot;,
       title = &amp;quot;Number of Legendary Pokemon per generation&amp;quot;) +
  theme_bw() &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-15-visualization-with-pokemon/index_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;third&lt;/strong&gt; generation have a greater number of legendary Pokemon than the rest generations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;To answer the follow-up question from #4:
&lt;ul&gt;
&lt;li&gt;This means &lt;em&gt;the fourth generation’s Pokemon has the best overall stats in-game&lt;/em&gt; and &lt;em&gt;not necessarily because of the number of legendary Pokemon it holds&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;what-is-the-strongest-pokemon-in-overall-total-stats-is-it-a-legendary-pokemon&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;6. What is the strongest Pokemon in overall (&lt;code&gt;Total&lt;/code&gt;) stats? Is it a legendary Pokemon?&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Pokemon %&amp;gt;%
  select(Name, Total, Legendary) %&amp;gt;%
  arrange(desc(Total)) %&amp;gt;%
  slice(1:20) %&amp;gt;%
  ggplot(aes(x = reorder(Name, Total), y = Total)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;, aes(fill = Legendary), colour = &amp;quot;black&amp;quot;) +
  geom_label(aes(label = Total)) +
  coord_flip() +
  labs(x = &amp;quot;Name&amp;quot;, title = &amp;quot;Top 20 Pokemon in terms of Total Stats&amp;quot;) +
  theme_test() &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-15-visualization-with-pokemon/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;From the plot above, we can see that the most Pokemon that have the highest &lt;code&gt;Total&lt;/code&gt; stats are legendary Pokemon.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are 3 Pokemon that share the highest &lt;code&gt;Total&lt;/code&gt; stats in the game which are &lt;em&gt;Mega Rayquaza, Mega Mewtwo Y, and Mega Mewtwo X&lt;/em&gt;. And all three of them are indeed a legendary Pokemon.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This also supports the evidence that legendary Pokemon have higher stats than the normal ones.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;what-is-the-weakest-pokemon-in-overall-total-stats-is-it-a-normal-pokemon&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;7. What is the weakest Pokemon in overall (&lt;code&gt;Total&lt;/code&gt;) stats? Is it a normal Pokemon?&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Pokemon %&amp;gt;%
  select(Name, Total, Legendary) %&amp;gt;%
  arrange(Total) %&amp;gt;%
  slice(1:10) %&amp;gt;%
  ggplot(aes(x = reorder(Name, desc(Total)), y = Total)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;, aes(fill = Legendary), colour = &amp;quot;black&amp;quot;) +
  geom_label(aes(label = Total)) +
  coord_flip() +
  labs(x = &amp;quot;Name&amp;quot;, title = &amp;quot;10 weakest Pokemon in terms of Total Stats&amp;quot;) +
  theme_test() &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-15-visualization-with-pokemon/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The weakest Pokemon in terms of &lt;code&gt;Total&lt;/code&gt; stats is &lt;em&gt;Sunkern&lt;/em&gt;. And all Pokemon that have low stats are normal Pokemon.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This makes sense since legendary Pokemon is equivalent or stronger than the final evolution (not mega evolution) from a normal Pokemon.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;is-there-a-relationship-between-pokemon-primary-types-type-1-and-total-stats&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;8. Is there a relationship between Pokemon primary types (&lt;code&gt;Type 1&lt;/code&gt;) and &lt;code&gt;Total&lt;/code&gt; stats?&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Pokemon %&amp;gt;% 
  group_by(type1) %&amp;gt;% 
  mutate(midquartile = median(Total)) %&amp;gt;% 
  ggplot(aes(x = reorder(type1, Total, FUN = median), y = Total)) +
  geom_boxplot(aes(fill = midquartile)) +
  scale_fill_gradient(low = &amp;quot;yellow&amp;quot;, high = &amp;quot;red3&amp;quot;) +
  coord_flip() +
  labs(x = &amp;quot;Type 1&amp;quot;, title = &amp;quot;Boxplot of Total&amp;quot;) +
  theme_bw() +
  theme(legend.position = &amp;quot;none&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-15-visualization-with-pokemon/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The plot above tells us that Dragon-type Pokemon are the strongest out of the other Pokemon type. From the median value, it clearly tells us that the Dragon-type have a very impressive stats.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Is Roulette the Best Way to Make Money?</title>
      <link>/post/play-a-roulette/</link>
      <pubDate>Sun, 08 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/post/play-a-roulette/</guid>
      <description>&lt;hr&gt;
&lt;h1 id=&#34;load-library&#34;&gt;Load library&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyverse)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ──
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ✔ ggplot2 3.2.1     ✔ purrr   0.3.3
## ✔ tibble  2.1.3     ✔ dplyr   0.8.3
## ✔ tidyr   1.0.0     ✔ stringr 1.4.0
## ✔ readr   1.3.1     ✔ forcats 0.4.0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Conflicts ───────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(kableExtra)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &#39;kableExtra&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following object is masked from &#39;package:dplyr&#39;:
## 
##     group_rows
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;A French roulette has:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;37 colored and numbered pockets&lt;/strong&gt; on the wheel.&lt;/li&gt;
&lt;li&gt;0 is &lt;span style=&#34;color:green&#34;&gt;green&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;In number ranges from 1 to 10 and 19 to 28:
&lt;ul&gt;
&lt;li&gt;Odd numbers are &lt;span style=&#34;color:red&#34;&gt;red&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Even numbers are &lt;span style=&#34;color:black&#34;&gt;black&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In ranges from 11 to 18 and 29 to 36:
&lt;ul&gt;
&lt;li&gt;Odd numbers are &lt;span style=&#34;color:black&#34;&gt;black&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Even numbers are &lt;span style=&#34;color:red&#34;&gt;red&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wheel = read.csv(&amp;quot;https://nkha149.github.io/stat385-sp2020/files/data/roulette.csv&amp;quot;)
wheel = as_tibble(wheel)
kable(wheel) %&amp;gt;%
  kable_styling(bootstrap_options = &amp;quot;striped&amp;quot;, full_width = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table table-striped&#34; style=&#34;width: auto !important; margin-left: auto; margin-right: auto;&#34;&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style=&#34;text-align:right;&#34;&gt; number &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt; color &lt;/th&gt;
  &lt;/tr&gt;
 &lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; green &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 1 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; red &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 2 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; black &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 3 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; red &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 4 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; black &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 5 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; red &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 6 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; black &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 7 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; red &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 8 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; black &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 9 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; red &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 10 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; black &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 11 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; black &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 12 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; red &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 13 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; black &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 14 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; red &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 15 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; black &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 16 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; red &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 17 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; black &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 18 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; red &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 19 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; red &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 20 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; black &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 21 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; red &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 22 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; black &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 23 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; red &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 24 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; black &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 25 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; red &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 26 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; black &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 27 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; red &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 28 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; black &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 29 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; black &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 30 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; red &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 31 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; black &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 32 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; red &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 33 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; black &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 34 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; red &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 35 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; black &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 36 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; red &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;We will write an R function named &lt;code&gt;roulette()&lt;/code&gt; that simulate a roulette, that is it has:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input&lt;/strong&gt;: 2 arguments &lt;code&gt;bet&lt;/code&gt; and &lt;code&gt;amount&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bet&lt;/code&gt;: argument that takes one of the following options:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;low&lt;/code&gt;(1-18) or &lt;code&gt;high&lt;/code&gt; (19-36): A bet that the number will be in the chosen range.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;red&lt;/code&gt; or &lt;code&gt;black&lt;/code&gt;: A bet that the number will be the chosen color.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;even&lt;/code&gt; or &lt;code&gt;odd&lt;/code&gt;: A bet that the number will be of the chosen type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first&lt;/code&gt; or &lt;code&gt;second&lt;/code&gt; or &lt;code&gt;third&lt;/code&gt;: A bet that the number will be in the chosen dozen: first (1-12), second (13-24), or third (25-36).&lt;/li&gt;
&lt;li&gt;any number from 0 to 36.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;amount&lt;/code&gt;: amount in dollars that you want to bet on. The default value for &lt;code&gt;amount&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;The amount of money you gain/lose after the bet.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-amount&lt;/code&gt; if you lose the bet.&lt;/li&gt;
&lt;li&gt;The amount of money win is calculated following the table below.&lt;/li&gt;
&lt;li&gt;Make sure to include the &lt;code&gt;$&lt;/code&gt; dollar sign.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Bet Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Winning spaces&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Payout&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Straight up (a single number)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Any single number&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;36 to 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Low (1 to 18)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1, 2, 3, &amp;hellip;, 18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1 to 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;High (19 to 36)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;19, 20, 21, &amp;hellip;, 36&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1 to 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Red&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1 to 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Black&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1 to 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Odd&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1, 3, 5, &amp;hellip;, 35&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1 to 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Even&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2, 4, 6, &amp;hellip;, 36&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1 to 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1st dozen&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1 through 12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2 to 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2nd dozen&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;13 through 24&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2 to 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;3rd dozen&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;25 through 36&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2 to 1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;simulations-and-graphing&#34;&gt;Simulations and Graphing&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;roulette = function(bet, amount = 1) {
  pick = sample(x = 0:(nrow(wheel) - 1), size = 1, replace = TRUE)
  low = 1:18
  high = 19:36
  red = c(1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36)
  odd = seq(from = 1, to = 36, by = 2)
  black = c(2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35)
  even = seq(from = 2, to = 36, by = 2)
  first = 1:12
  second = 13:24
  third = 25:36
  if ((pick %in% low) &amp;amp; (bet == &amp;quot;low&amp;quot;)) {
    amount
  } else if ((pick %in% high) &amp;amp; (bet == &amp;quot;high&amp;quot;)) {
    amount
  } else if ((bet == &amp;quot;red&amp;quot;) &amp;amp; (pick %in% red)) {
    amount
  } else if ((bet == &amp;quot;black&amp;quot;) &amp;amp; (pick %in% black)) {
    amount
  } else if ((bet == &amp;quot;even&amp;quot;) &amp;amp; (pick %in% even)) {
    amount
  } else if ((bet == &amp;quot;odd&amp;quot;) &amp;amp; (pick %in% odd)) {
    amount
  } else if ((bet == &amp;quot;first&amp;quot;) &amp;amp; (pick %in% first)) {
    amount * 2
  } else if ((bet == &amp;quot;second&amp;quot;) &amp;amp; (pick %in% second)) {
    amount * 2
  } else if ((bet == &amp;quot;third&amp;quot;) &amp;amp; (pick %in% third)) {
    amount * 2
  } else if (pick == bet) {
    amount * 36
  } else {
    amount * -1
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;We want to estimate the &lt;strong&gt;probability of winning if we keep betting on &lt;code&gt;red&lt;/code&gt;&lt;/strong&gt;. To do that, we use simulation studies, that is running the &lt;code&gt;roulette()&lt;/code&gt; function many many times and record the number of times we win (not have a negative total amount at the end of the game). The number of simulations &lt;code&gt;n&lt;/code&gt; is 5000.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(385)
results = replicate(roulette(bet = &amp;quot;red&amp;quot;, amount = 1), n = 5000)
length(results[results == 1]) / 5000 # probability of winning if we keep betting on red
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.4862
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Similarly, we want estimate the &lt;strong&gt;probability of winning if we keep betting on the &lt;code&gt;first&lt;/code&gt; dozen&lt;/strong&gt;. The number of simulations &lt;code&gt;n&lt;/code&gt; is 5000.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(385)
results2= replicate(roulette(bet = &amp;quot;first&amp;quot;), n = 5000)
length(results2[results2 == 2]) / 5000 # probability of winning if we keep betting on the first dozen
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.3114
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Now, we want to estimate the &lt;strong&gt;expected value of amount of money we will have by the end of the game if we bet on &lt;code&gt;red&lt;/code&gt; with $1&lt;/strong&gt;. We will do the simulations for 10000 times where &lt;code&gt;n&lt;/code&gt; = 10,000.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(385)
results3 = replicate(roulette(bet = &amp;quot;red&amp;quot;, amount = 1), n = 10000)
1 * length(results3[results3 == 1]) / 10000 - 1 * (1 - length(results3[results3 == 1]) / 10000) # expected value of amount of money we will have by the end of the game if we bet on odd with $5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -0.0248
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;interpretation-of-results&#34;&gt;Interpretation of Results&lt;/h2&gt;
&lt;p&gt;It helps to remember the meaning of expected value to interpret the results of this calculation. The expected value is basically, a measurement of the average. It indicates what will happen in the long run every time that we bet $1 on red.&lt;/p&gt;
&lt;p&gt;While we might win several times in a row in the short term, in the long run, we will lose over 2 cents on average each time that we play. The presence of the 0 and 00 spaces are just enough to give the house a slight advantage. This advantage is so small that it can be difficult to detect, but in the end, the player always loses&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic Exploratory Data Analysis and Simple Linear Regression in Python</title>
      <link>/post/wine-eda/</link>
      <pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/post/wine-eda/</guid>
      <description>&lt;h1 id=&#34;import-library&#34;&gt;Import Library&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression

# Visulaization options:
%matplotlib inline
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;read-data&#34;&gt;Read data&lt;/h1&gt;
&lt;h3 id=&#34;data-obtained-from-uci-machine-learning-repository--accessed-via-kaggle-httpswwwkagglecomucimlred-wine-quality-cortez-et-al-2009&#34;&gt;Data obtained from UCI Machine Learning Repository &amp;amp; accessed via Kaggle (&lt;a href=&#34;https://www.kaggle.com/uciml/red-wine-quality-cortez-et-al-2009&#34;&gt;https://www.kaggle.com/uciml/red-wine-quality-cortez-et-al-2009&lt;/a&gt;)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_csv(&amp;quot;redwine.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;fixed acidity&lt;/th&gt;
      &lt;th&gt;volatile acidity&lt;/th&gt;
      &lt;th&gt;citric acid&lt;/th&gt;
      &lt;th&gt;residual sugar&lt;/th&gt;
      &lt;th&gt;chlorides&lt;/th&gt;
      &lt;th&gt;free sulfur dioxide&lt;/th&gt;
      &lt;th&gt;total sulfur dioxide&lt;/th&gt;
      &lt;th&gt;density&lt;/th&gt;
      &lt;th&gt;pH&lt;/th&gt;
      &lt;th&gt;sulphates&lt;/th&gt;
      &lt;th&gt;alcohol&lt;/th&gt;
      &lt;th&gt;quality&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;7.4&lt;/td&gt;
      &lt;td&gt;0.700&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;1.9&lt;/td&gt;
      &lt;td&gt;0.076&lt;/td&gt;
      &lt;td&gt;11.0&lt;/td&gt;
      &lt;td&gt;34.0&lt;/td&gt;
      &lt;td&gt;0.99780&lt;/td&gt;
      &lt;td&gt;3.51&lt;/td&gt;
      &lt;td&gt;0.56&lt;/td&gt;
      &lt;td&gt;9.4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;7.8&lt;/td&gt;
      &lt;td&gt;0.880&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;2.6&lt;/td&gt;
      &lt;td&gt;0.098&lt;/td&gt;
      &lt;td&gt;25.0&lt;/td&gt;
      &lt;td&gt;67.0&lt;/td&gt;
      &lt;td&gt;0.99680&lt;/td&gt;
      &lt;td&gt;3.20&lt;/td&gt;
      &lt;td&gt;0.68&lt;/td&gt;
      &lt;td&gt;9.8&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;7.8&lt;/td&gt;
      &lt;td&gt;0.760&lt;/td&gt;
      &lt;td&gt;0.04&lt;/td&gt;
      &lt;td&gt;2.3&lt;/td&gt;
      &lt;td&gt;0.092&lt;/td&gt;
      &lt;td&gt;15.0&lt;/td&gt;
      &lt;td&gt;54.0&lt;/td&gt;
      &lt;td&gt;0.99700&lt;/td&gt;
      &lt;td&gt;3.26&lt;/td&gt;
      &lt;td&gt;0.65&lt;/td&gt;
      &lt;td&gt;9.8&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;11.2&lt;/td&gt;
      &lt;td&gt;0.280&lt;/td&gt;
      &lt;td&gt;0.56&lt;/td&gt;
      &lt;td&gt;1.9&lt;/td&gt;
      &lt;td&gt;0.075&lt;/td&gt;
      &lt;td&gt;17.0&lt;/td&gt;
      &lt;td&gt;60.0&lt;/td&gt;
      &lt;td&gt;0.99800&lt;/td&gt;
      &lt;td&gt;3.16&lt;/td&gt;
      &lt;td&gt;0.58&lt;/td&gt;
      &lt;td&gt;9.8&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;7.4&lt;/td&gt;
      &lt;td&gt;0.700&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;1.9&lt;/td&gt;
      &lt;td&gt;0.076&lt;/td&gt;
      &lt;td&gt;11.0&lt;/td&gt;
      &lt;td&gt;34.0&lt;/td&gt;
      &lt;td&gt;0.99780&lt;/td&gt;
      &lt;td&gt;3.51&lt;/td&gt;
      &lt;td&gt;0.56&lt;/td&gt;
      &lt;td&gt;9.4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1594&lt;/td&gt;
      &lt;td&gt;6.2&lt;/td&gt;
      &lt;td&gt;0.600&lt;/td&gt;
      &lt;td&gt;0.08&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;0.090&lt;/td&gt;
      &lt;td&gt;32.0&lt;/td&gt;
      &lt;td&gt;44.0&lt;/td&gt;
      &lt;td&gt;0.99490&lt;/td&gt;
      &lt;td&gt;3.45&lt;/td&gt;
      &lt;td&gt;0.58&lt;/td&gt;
      &lt;td&gt;10.5&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1595&lt;/td&gt;
      &lt;td&gt;5.9&lt;/td&gt;
      &lt;td&gt;0.550&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;2.2&lt;/td&gt;
      &lt;td&gt;0.062&lt;/td&gt;
      &lt;td&gt;39.0&lt;/td&gt;
      &lt;td&gt;51.0&lt;/td&gt;
      &lt;td&gt;0.99512&lt;/td&gt;
      &lt;td&gt;3.52&lt;/td&gt;
      &lt;td&gt;0.76&lt;/td&gt;
      &lt;td&gt;11.2&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1596&lt;/td&gt;
      &lt;td&gt;6.3&lt;/td&gt;
      &lt;td&gt;0.510&lt;/td&gt;
      &lt;td&gt;0.13&lt;/td&gt;
      &lt;td&gt;2.3&lt;/td&gt;
      &lt;td&gt;0.076&lt;/td&gt;
      &lt;td&gt;29.0&lt;/td&gt;
      &lt;td&gt;40.0&lt;/td&gt;
      &lt;td&gt;0.99574&lt;/td&gt;
      &lt;td&gt;3.42&lt;/td&gt;
      &lt;td&gt;0.75&lt;/td&gt;
      &lt;td&gt;11.0&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1597&lt;/td&gt;
      &lt;td&gt;5.9&lt;/td&gt;
      &lt;td&gt;0.645&lt;/td&gt;
      &lt;td&gt;0.12&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;0.075&lt;/td&gt;
      &lt;td&gt;32.0&lt;/td&gt;
      &lt;td&gt;44.0&lt;/td&gt;
      &lt;td&gt;0.99547&lt;/td&gt;
      &lt;td&gt;3.57&lt;/td&gt;
      &lt;td&gt;0.71&lt;/td&gt;
      &lt;td&gt;10.2&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1598&lt;/td&gt;
      &lt;td&gt;6.0&lt;/td&gt;
      &lt;td&gt;0.310&lt;/td&gt;
      &lt;td&gt;0.47&lt;/td&gt;
      &lt;td&gt;3.6&lt;/td&gt;
      &lt;td&gt;0.067&lt;/td&gt;
      &lt;td&gt;18.0&lt;/td&gt;
      &lt;td&gt;42.0&lt;/td&gt;
      &lt;td&gt;0.99549&lt;/td&gt;
      &lt;td&gt;3.39&lt;/td&gt;
      &lt;td&gt;0.66&lt;/td&gt;
      &lt;td&gt;11.0&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;1599 rows × 12 columns&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;data-description&#34;&gt;Data Description&lt;/h2&gt;
&lt;p&gt;Accessed via Kaggle&lt;/p&gt;
&lt;h3 id=&#34;about&#34;&gt;About&lt;/h3&gt;
&lt;p&gt;The dataset is related to red variants of the Portuguese &lt;strong&gt;&amp;ldquo;Vinho Verde&amp;rdquo;&lt;/strong&gt; wine. For more details, consult the reference [Cortez et al., 2009]. Due to privacy and logistic issues, only physicochemical (inputs) and sensory (the output) variables are available (e.g. there is no data about grape types, wine brand, wine selling price, etc.).&lt;/p&gt;
&lt;h3 id=&#34;input-variables-based-on-physicochemical-tests&#34;&gt;Input variables (based on physicochemical tests):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fixed acidity&lt;/code&gt; : most acids involved with wine or fixed or nonvolatile (do not evaporate readily).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volatile acidity&lt;/code&gt; : the amount of acetic acid in wine, which at too high of levels can lead to an unpleasant, vinegar taste.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;citric acid&lt;/code&gt; : found in small quantities, citric acid can add &amp;lsquo;freshness&amp;rsquo; and flavor to wines.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;residual sugar&lt;/code&gt; : the amount of sugar remaining after fermentation stops, it&amp;rsquo;s rare to find wines with less than 1 gram/liter and wines with greater than 45 grams/liter are considered sweet.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chlorides&lt;/code&gt; : the amount of salt in the wine.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;free sulfur dioxide&lt;/code&gt; : the free form of SO2 exists in equilibrium between molecular SO2 (as a dissolved gas) and bisulfite ion; it prevents microbial growth and the oxidation of wine.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;total sulfur dioxide&lt;/code&gt; : amount of free and bound forms of S02; in low concentrations, SO2 is mostly undetectable in wine, but at free SO2 concentrations over 50 ppm, SO2 becomes evident in the nose and taste of wine.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;density&lt;/code&gt; : the density of water is close to that of water depending on the percent alcohol and sugar content.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pH&lt;/code&gt; : describes how acidic or basic a wine is on a scale from 0 (very acidic) to 14 (very basic); most wines are between 3-4 on the pH scale.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sulphates&lt;/code&gt; : a wine additive which can contribute to sulfur dioxide gas (S02) levels, which acts as an antimicrobial and antioxidant.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alcohol&lt;/code&gt; : the percent alcohol content of the wine.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;output-variable-based-on-sensory-data&#34;&gt;Output variable (based on sensory data):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;quality&lt;/code&gt; : score between 0 and 10 given by human wine tasters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;exploratory-data-analysis-eda&#34;&gt;Exploratory Data Analysis (EDA)&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# print out dataframe dimension or shape (rows x columns)
df.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(1599, 12)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# print out information on the data
df.info()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 1599 entries, 0 to 1598
Data columns (total 12 columns):
fixed acidity           1599 non-null float64
volatile acidity        1599 non-null float64
citric acid             1599 non-null float64
residual sugar          1599 non-null float64
chlorides               1599 non-null float64
free sulfur dioxide     1599 non-null float64
total sulfur dioxide    1599 non-null float64
density                 1599 non-null float64
pH                      1599 non-null float64
sulphates               1599 non-null float64
alcohol                 1599 non-null float64
quality                 1599 non-null int64
dtypes: float64(11), int64(1)
memory usage: 150.0 KB
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# print out summary information about all numeric data columns in your dataset.
df.describe()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;fixed acidity&lt;/th&gt;
      &lt;th&gt;volatile acidity&lt;/th&gt;
      &lt;th&gt;citric acid&lt;/th&gt;
      &lt;th&gt;residual sugar&lt;/th&gt;
      &lt;th&gt;chlorides&lt;/th&gt;
      &lt;th&gt;free sulfur dioxide&lt;/th&gt;
      &lt;th&gt;total sulfur dioxide&lt;/th&gt;
      &lt;th&gt;density&lt;/th&gt;
      &lt;th&gt;pH&lt;/th&gt;
      &lt;th&gt;sulphates&lt;/th&gt;
      &lt;th&gt;alcohol&lt;/th&gt;
      &lt;th&gt;quality&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;count&lt;/td&gt;
      &lt;td&gt;1599.000000&lt;/td&gt;
      &lt;td&gt;1599.000000&lt;/td&gt;
      &lt;td&gt;1599.000000&lt;/td&gt;
      &lt;td&gt;1599.000000&lt;/td&gt;
      &lt;td&gt;1599.000000&lt;/td&gt;
      &lt;td&gt;1599.000000&lt;/td&gt;
      &lt;td&gt;1599.000000&lt;/td&gt;
      &lt;td&gt;1599.000000&lt;/td&gt;
      &lt;td&gt;1599.000000&lt;/td&gt;
      &lt;td&gt;1599.000000&lt;/td&gt;
      &lt;td&gt;1599.000000&lt;/td&gt;
      &lt;td&gt;1599.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mean&lt;/td&gt;
      &lt;td&gt;8.319637&lt;/td&gt;
      &lt;td&gt;0.527821&lt;/td&gt;
      &lt;td&gt;0.270976&lt;/td&gt;
      &lt;td&gt;2.538806&lt;/td&gt;
      &lt;td&gt;0.087467&lt;/td&gt;
      &lt;td&gt;15.874922&lt;/td&gt;
      &lt;td&gt;46.467792&lt;/td&gt;
      &lt;td&gt;0.996747&lt;/td&gt;
      &lt;td&gt;3.311113&lt;/td&gt;
      &lt;td&gt;0.658149&lt;/td&gt;
      &lt;td&gt;10.422983&lt;/td&gt;
      &lt;td&gt;5.636023&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;std&lt;/td&gt;
      &lt;td&gt;1.741096&lt;/td&gt;
      &lt;td&gt;0.179060&lt;/td&gt;
      &lt;td&gt;0.194801&lt;/td&gt;
      &lt;td&gt;1.409928&lt;/td&gt;
      &lt;td&gt;0.047065&lt;/td&gt;
      &lt;td&gt;10.460157&lt;/td&gt;
      &lt;td&gt;32.895324&lt;/td&gt;
      &lt;td&gt;0.001887&lt;/td&gt;
      &lt;td&gt;0.154386&lt;/td&gt;
      &lt;td&gt;0.169507&lt;/td&gt;
      &lt;td&gt;1.065668&lt;/td&gt;
      &lt;td&gt;0.807569&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;min&lt;/td&gt;
      &lt;td&gt;4.600000&lt;/td&gt;
      &lt;td&gt;0.120000&lt;/td&gt;
      &lt;td&gt;0.000000&lt;/td&gt;
      &lt;td&gt;0.900000&lt;/td&gt;
      &lt;td&gt;0.012000&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;6.000000&lt;/td&gt;
      &lt;td&gt;0.990070&lt;/td&gt;
      &lt;td&gt;2.740000&lt;/td&gt;
      &lt;td&gt;0.330000&lt;/td&gt;
      &lt;td&gt;8.400000&lt;/td&gt;
      &lt;td&gt;3.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;25%&lt;/td&gt;
      &lt;td&gt;7.100000&lt;/td&gt;
      &lt;td&gt;0.390000&lt;/td&gt;
      &lt;td&gt;0.090000&lt;/td&gt;
      &lt;td&gt;1.900000&lt;/td&gt;
      &lt;td&gt;0.070000&lt;/td&gt;
      &lt;td&gt;7.000000&lt;/td&gt;
      &lt;td&gt;22.000000&lt;/td&gt;
      &lt;td&gt;0.995600&lt;/td&gt;
      &lt;td&gt;3.210000&lt;/td&gt;
      &lt;td&gt;0.550000&lt;/td&gt;
      &lt;td&gt;9.500000&lt;/td&gt;
      &lt;td&gt;5.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;50%&lt;/td&gt;
      &lt;td&gt;7.900000&lt;/td&gt;
      &lt;td&gt;0.520000&lt;/td&gt;
      &lt;td&gt;0.260000&lt;/td&gt;
      &lt;td&gt;2.200000&lt;/td&gt;
      &lt;td&gt;0.079000&lt;/td&gt;
      &lt;td&gt;14.000000&lt;/td&gt;
      &lt;td&gt;38.000000&lt;/td&gt;
      &lt;td&gt;0.996750&lt;/td&gt;
      &lt;td&gt;3.310000&lt;/td&gt;
      &lt;td&gt;0.620000&lt;/td&gt;
      &lt;td&gt;10.200000&lt;/td&gt;
      &lt;td&gt;6.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;75%&lt;/td&gt;
      &lt;td&gt;9.200000&lt;/td&gt;
      &lt;td&gt;0.640000&lt;/td&gt;
      &lt;td&gt;0.420000&lt;/td&gt;
      &lt;td&gt;2.600000&lt;/td&gt;
      &lt;td&gt;0.090000&lt;/td&gt;
      &lt;td&gt;21.000000&lt;/td&gt;
      &lt;td&gt;62.000000&lt;/td&gt;
      &lt;td&gt;0.997835&lt;/td&gt;
      &lt;td&gt;3.400000&lt;/td&gt;
      &lt;td&gt;0.730000&lt;/td&gt;
      &lt;td&gt;11.100000&lt;/td&gt;
      &lt;td&gt;6.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;max&lt;/td&gt;
      &lt;td&gt;15.900000&lt;/td&gt;
      &lt;td&gt;1.580000&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;15.500000&lt;/td&gt;
      &lt;td&gt;0.611000&lt;/td&gt;
      &lt;td&gt;72.000000&lt;/td&gt;
      &lt;td&gt;289.000000&lt;/td&gt;
      &lt;td&gt;1.003690&lt;/td&gt;
      &lt;td&gt;4.010000&lt;/td&gt;
      &lt;td&gt;2.000000&lt;/td&gt;
      &lt;td&gt;14.900000&lt;/td&gt;
      &lt;td&gt;8.000000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# print out the distribution on each column (variable) 
df.hist(bins = 50, edgecolor = &#39;b&#39;, grid = False,
                linewidth = 1.0,
                xlabelsize = 8, ylabelsize = 8,  
                figsize = (16, 6), color = &#39;orange&#39;)    
plt.tight_layout(rect = (0, 0, 1.5, 1.5))   
plt.suptitle(&#39;Red Wine Plots&#39;, x = 0.75, y = 1.65, fontsize = 20);  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/img/image1.png&#34; alt=&#34;This is an image&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# print out histogram of the quality variable 
df[&#39;quality&#39;].hist(bins = 6, grid = False, color = &#39;red&#39;, edgecolor = &#39;b&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x1a1f4fc438&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/img/image2.png&#34; alt=&#34;This is an image&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# print out the correlation matrix (for each column)
df.corr()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;fixed acidity&lt;/th&gt;
      &lt;th&gt;volatile acidity&lt;/th&gt;
      &lt;th&gt;citric acid&lt;/th&gt;
      &lt;th&gt;residual sugar&lt;/th&gt;
      &lt;th&gt;chlorides&lt;/th&gt;
      &lt;th&gt;free sulfur dioxide&lt;/th&gt;
      &lt;th&gt;total sulfur dioxide&lt;/th&gt;
      &lt;th&gt;density&lt;/th&gt;
      &lt;th&gt;pH&lt;/th&gt;
      &lt;th&gt;sulphates&lt;/th&gt;
      &lt;th&gt;alcohol&lt;/th&gt;
      &lt;th&gt;quality&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;fixed acidity&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;-0.256131&lt;/td&gt;
      &lt;td&gt;0.671703&lt;/td&gt;
      &lt;td&gt;0.114777&lt;/td&gt;
      &lt;td&gt;0.093705&lt;/td&gt;
      &lt;td&gt;-0.153794&lt;/td&gt;
      &lt;td&gt;-0.113181&lt;/td&gt;
      &lt;td&gt;0.668047&lt;/td&gt;
      &lt;td&gt;-0.682978&lt;/td&gt;
      &lt;td&gt;0.183006&lt;/td&gt;
      &lt;td&gt;-0.061668&lt;/td&gt;
      &lt;td&gt;0.124052&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;volatile acidity&lt;/td&gt;
      &lt;td&gt;-0.256131&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;-0.552496&lt;/td&gt;
      &lt;td&gt;0.001918&lt;/td&gt;
      &lt;td&gt;0.061298&lt;/td&gt;
      &lt;td&gt;-0.010504&lt;/td&gt;
      &lt;td&gt;0.076470&lt;/td&gt;
      &lt;td&gt;0.022026&lt;/td&gt;
      &lt;td&gt;0.234937&lt;/td&gt;
      &lt;td&gt;-0.260987&lt;/td&gt;
      &lt;td&gt;-0.202288&lt;/td&gt;
      &lt;td&gt;-0.390558&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;citric acid&lt;/td&gt;
      &lt;td&gt;0.671703&lt;/td&gt;
      &lt;td&gt;-0.552496&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.143577&lt;/td&gt;
      &lt;td&gt;0.203823&lt;/td&gt;
      &lt;td&gt;-0.060978&lt;/td&gt;
      &lt;td&gt;0.035533&lt;/td&gt;
      &lt;td&gt;0.364947&lt;/td&gt;
      &lt;td&gt;-0.541904&lt;/td&gt;
      &lt;td&gt;0.312770&lt;/td&gt;
      &lt;td&gt;0.109903&lt;/td&gt;
      &lt;td&gt;0.226373&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;residual sugar&lt;/td&gt;
      &lt;td&gt;0.114777&lt;/td&gt;
      &lt;td&gt;0.001918&lt;/td&gt;
      &lt;td&gt;0.143577&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.055610&lt;/td&gt;
      &lt;td&gt;0.187049&lt;/td&gt;
      &lt;td&gt;0.203028&lt;/td&gt;
      &lt;td&gt;0.355283&lt;/td&gt;
      &lt;td&gt;-0.085652&lt;/td&gt;
      &lt;td&gt;0.005527&lt;/td&gt;
      &lt;td&gt;0.042075&lt;/td&gt;
      &lt;td&gt;0.013732&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;chlorides&lt;/td&gt;
      &lt;td&gt;0.093705&lt;/td&gt;
      &lt;td&gt;0.061298&lt;/td&gt;
      &lt;td&gt;0.203823&lt;/td&gt;
      &lt;td&gt;0.055610&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.005562&lt;/td&gt;
      &lt;td&gt;0.047400&lt;/td&gt;
      &lt;td&gt;0.200632&lt;/td&gt;
      &lt;td&gt;-0.265026&lt;/td&gt;
      &lt;td&gt;0.371260&lt;/td&gt;
      &lt;td&gt;-0.221141&lt;/td&gt;
      &lt;td&gt;-0.128907&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;free sulfur dioxide&lt;/td&gt;
      &lt;td&gt;-0.153794&lt;/td&gt;
      &lt;td&gt;-0.010504&lt;/td&gt;
      &lt;td&gt;-0.060978&lt;/td&gt;
      &lt;td&gt;0.187049&lt;/td&gt;
      &lt;td&gt;0.005562&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.667666&lt;/td&gt;
      &lt;td&gt;-0.021946&lt;/td&gt;
      &lt;td&gt;0.070377&lt;/td&gt;
      &lt;td&gt;0.051658&lt;/td&gt;
      &lt;td&gt;-0.069408&lt;/td&gt;
      &lt;td&gt;-0.050656&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;total sulfur dioxide&lt;/td&gt;
      &lt;td&gt;-0.113181&lt;/td&gt;
      &lt;td&gt;0.076470&lt;/td&gt;
      &lt;td&gt;0.035533&lt;/td&gt;
      &lt;td&gt;0.203028&lt;/td&gt;
      &lt;td&gt;0.047400&lt;/td&gt;
      &lt;td&gt;0.667666&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.071269&lt;/td&gt;
      &lt;td&gt;-0.066495&lt;/td&gt;
      &lt;td&gt;0.042947&lt;/td&gt;
      &lt;td&gt;-0.205654&lt;/td&gt;
      &lt;td&gt;-0.185100&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;density&lt;/td&gt;
      &lt;td&gt;0.668047&lt;/td&gt;
      &lt;td&gt;0.022026&lt;/td&gt;
      &lt;td&gt;0.364947&lt;/td&gt;
      &lt;td&gt;0.355283&lt;/td&gt;
      &lt;td&gt;0.200632&lt;/td&gt;
      &lt;td&gt;-0.021946&lt;/td&gt;
      &lt;td&gt;0.071269&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;-0.341699&lt;/td&gt;
      &lt;td&gt;0.148506&lt;/td&gt;
      &lt;td&gt;-0.496180&lt;/td&gt;
      &lt;td&gt;-0.174919&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pH&lt;/td&gt;
      &lt;td&gt;-0.682978&lt;/td&gt;
      &lt;td&gt;0.234937&lt;/td&gt;
      &lt;td&gt;-0.541904&lt;/td&gt;
      &lt;td&gt;-0.085652&lt;/td&gt;
      &lt;td&gt;-0.265026&lt;/td&gt;
      &lt;td&gt;0.070377&lt;/td&gt;
      &lt;td&gt;-0.066495&lt;/td&gt;
      &lt;td&gt;-0.341699&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;-0.196648&lt;/td&gt;
      &lt;td&gt;0.205633&lt;/td&gt;
      &lt;td&gt;-0.057731&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sulphates&lt;/td&gt;
      &lt;td&gt;0.183006&lt;/td&gt;
      &lt;td&gt;-0.260987&lt;/td&gt;
      &lt;td&gt;0.312770&lt;/td&gt;
      &lt;td&gt;0.005527&lt;/td&gt;
      &lt;td&gt;0.371260&lt;/td&gt;
      &lt;td&gt;0.051658&lt;/td&gt;
      &lt;td&gt;0.042947&lt;/td&gt;
      &lt;td&gt;0.148506&lt;/td&gt;
      &lt;td&gt;-0.196648&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.093595&lt;/td&gt;
      &lt;td&gt;0.251397&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;alcohol&lt;/td&gt;
      &lt;td&gt;-0.061668&lt;/td&gt;
      &lt;td&gt;-0.202288&lt;/td&gt;
      &lt;td&gt;0.109903&lt;/td&gt;
      &lt;td&gt;0.042075&lt;/td&gt;
      &lt;td&gt;-0.221141&lt;/td&gt;
      &lt;td&gt;-0.069408&lt;/td&gt;
      &lt;td&gt;-0.205654&lt;/td&gt;
      &lt;td&gt;-0.496180&lt;/td&gt;
      &lt;td&gt;0.205633&lt;/td&gt;
      &lt;td&gt;0.093595&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.476166&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;quality&lt;/td&gt;
      &lt;td&gt;0.124052&lt;/td&gt;
      &lt;td&gt;-0.390558&lt;/td&gt;
      &lt;td&gt;0.226373&lt;/td&gt;
      &lt;td&gt;0.013732&lt;/td&gt;
      &lt;td&gt;-0.128907&lt;/td&gt;
      &lt;td&gt;-0.050656&lt;/td&gt;
      &lt;td&gt;-0.185100&lt;/td&gt;
      &lt;td&gt;-0.174919&lt;/td&gt;
      &lt;td&gt;-0.057731&lt;/td&gt;
      &lt;td&gt;0.251397&lt;/td&gt;
      &lt;td&gt;0.476166&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# print out correlation heatmap using &#39;seaborn&#39; library
sns.heatmap(df.corr(), cmap = &amp;quot;YlGnBu&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x1a1fad1400&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/img/image3.png&#34; alt=&#34;This is an image&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;modeling&#34;&gt;Modeling&lt;/h1&gt;
&lt;h2 id=&#34;using-linear-regression&#34;&gt;Using Linear Regression&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create a linear regression model:
model = LinearRegression()

# Train (&amp;quot;fit&amp;quot;) the model:
model = model.fit(df[ [&#39;fixed acidity&#39;, &#39;volatile acidity&#39;, &#39;citric acid&#39;, &#39;residual sugar&#39;, &#39;chlorides&#39;, &#39;free sulfur dioxide&#39;, &#39;total sulfur dioxide&#39;, &#39;density&#39;, &#39;pH&#39;, &#39;sulphates&#39;,&#39;alcohol&#39;] ], df[&#39;quality&#39;] )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# print out the intercept:
intercept = model.intercept_
intercept

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;21.965208449448177
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# print out the slope (as table):
slope = model.coef_

coeff_df = pd.DataFrame(slope, [&#39;fixed acidity&#39;, &#39;volatile acidity&#39;, &#39;citric acid&#39;, &#39;residual sugar&#39;, &#39;chlorides&#39;, &#39;free sulfur dioxide&#39;, &#39;total sulfur dioxide&#39;, &#39;density&#39;, &#39;pH&#39;, &#39;sulphates&#39;,&#39;alcohol&#39;]  , columns = [&#39;Coefficient&#39;])  
coeff_df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Coefficient&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;fixed acidity&lt;/td&gt;
      &lt;td&gt;0.024991&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;volatile acidity&lt;/td&gt;
      &lt;td&gt;-1.083590&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;citric acid&lt;/td&gt;
      &lt;td&gt;-0.182564&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;residual sugar&lt;/td&gt;
      &lt;td&gt;0.016331&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;chlorides&lt;/td&gt;
      &lt;td&gt;-1.874225&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;free sulfur dioxide&lt;/td&gt;
      &lt;td&gt;0.004361&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;total sulfur dioxide&lt;/td&gt;
      &lt;td&gt;-0.003265&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;density&lt;/td&gt;
      &lt;td&gt;-17.881164&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pH&lt;/td&gt;
      &lt;td&gt;-0.413653&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sulphates&lt;/td&gt;
      &lt;td&gt;0.916334&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;alcohol&lt;/td&gt;
      &lt;td&gt;0.276198&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# create prediction using our model
df[&amp;quot;predicted&amp;quot;] = model.predict( df[ [&#39;fixed acidity&#39;, &#39;volatile acidity&#39;, &#39;citric acid&#39;, &#39;residual sugar&#39;, &#39;chlorides&#39;, &#39;free sulfur dioxide&#39;, &#39;total sulfur dioxide&#39;, &#39;density&#39;, &#39;pH&#39;, &#39;sulphates&#39;,&#39;alcohol&#39;] ] )

df[&amp;quot;predicted&amp;quot;] = round(df[&amp;quot;predicted&amp;quot;], 0)
df[&amp;quot;predicted&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0       5.0
1       5.0
2       5.0
3       6.0
4       5.0
       ... 
1594    6.0
1595    6.0
1596    6.0
1597    5.0
1598    6.0
Name: predicted, Length: 1599, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;results&#34;&gt;Results&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;relationship-of-ph-and-fixed-acidity&#34;&gt;Relationship of &lt;code&gt;pH&lt;/code&gt; and &lt;code&gt;fixed acidity&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;From the correlation matrix (in EDA section), we can see that &lt;code&gt;pH&lt;/code&gt; and &lt;code&gt;fixed acidity&lt;/code&gt; have the highest correlation with the value of &lt;strong&gt;-0.682978&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create a scatter plot between &#39;pH&#39; (x-axis) and &#39;fixed acidity&#39;(y-axis). 
df.plot.scatter(x = &#39;pH&#39;, y = &#39;fixed acidity&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x1a2009fb00&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/img/image4.png&#34; alt=&#34;This is an image&#34;&gt;&lt;/p&gt;
&lt;p&gt;This negative correlation might be obvious and understandable since&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pH is the measure of acidity/basicity with a scale between 0 (very acid) and 14 (very basic) # information taken from chemistry class&lt;/li&gt;
&lt;li&gt;so the more acidic is a solution, pH value will decrease.&lt;/li&gt;
&lt;li&gt;as indicated in the data description, most wines are acidic and have pH values of 3-4 # in this data (lowest = 2.74 and highest = 4.01) obtained from EDA section.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Therefore, we can conclude that there is a causation between &lt;code&gt;pH&lt;/code&gt; and &lt;code&gt;fixed acidity&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;relationship-of-quality-and-alcohol&#34;&gt;Relationship of &lt;code&gt;quality&lt;/code&gt; and &lt;code&gt;alcohol&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;From the correlation matrix (in EDA section), we found out that &lt;code&gt;alcohol&lt;/code&gt; has the highest correlation with our target or response variable &lt;code&gt;quality&lt;/code&gt; with a value of &lt;strong&gt;0.476166&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# visualization using &#39;seaborn&#39; library for scatter plot between &#39;alcohol&#39; and &#39;quality&#39;
sns.set()
sns.relplot(data = df, x = &#39;alcohol&#39;, y = &#39;quality&#39;, kind = &#39;line&#39;, height = 6, aspect = 2, color = &#39;red&#39;);    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/img/image5.jpg&#34; alt=&#34;This is an image&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The plot above clearly reflects the positive correlation between &lt;code&gt;quality&lt;/code&gt; and &lt;code&gt;alcohol&lt;/code&gt;. Where an increase in the alcohol level (&lt;strong&gt;&amp;lt;&lt;/strong&gt; 14) &lt;strong&gt;might&lt;/strong&gt; result in a better wine quality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One important thing to mention is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;This might not be necessarily true&lt;/strong&gt; since there are cases where a higher quality level might result in lower wine quality. (in this dataset, for instance, a wine with 9% alcohol level has a lower quality than wine with 8% alcohol level).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;While there is a positive correlation between &lt;code&gt;quality&lt;/code&gt; and &lt;code&gt;alcohol&lt;/code&gt; their relationship does not indicate causality.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;discussion&#34;&gt;Discussion&lt;/h1&gt;
&lt;p&gt;The predictive ability of our model is very &lt;strong&gt;low&lt;/strong&gt; with an accuracy of only &lt;strong&gt;59.16%&lt;/strong&gt;. This means our model does a really bad job on predicting the wine quality.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This bad results (predictive power) might be due to:
&lt;ul&gt;
&lt;li&gt;Limited predictor variable; in this dataset, we are only given variables that are based on physicochemical tests (lab tests such as alcohol percentage level, pH value, etc.).&lt;/li&gt;
&lt;li&gt;There are many predictor variables that might be more helpful in order to predict the wine quality such as &lt;code&gt;grape type&lt;/code&gt;, &lt;code&gt;wine age&lt;/code&gt;, &lt;code&gt;vineyard location&lt;/code&gt;, and etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# check our model accuracy
(df[&amp;quot;predicted&amp;quot;] == df[&amp;quot;quality&amp;quot;]).mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.5916197623514696
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;solutions-and-recommendations&#34;&gt;Solutions and Recommendations:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Obtain more data (predictor variables and samples) and do another analysis.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Creating a Mosaic [Part. 2]</title>
      <link>/post/mosaic02/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/post/mosaic02/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import skimage
import skimage.io
import pandas as pd

import PIL
from PIL import Image

from os import listdir
from os.path import isfile, join
import sys
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;creating-a-mosaic---part-2&#34;&gt;Creating a Mosaic - Part 2&lt;/h1&gt;
&lt;h2 id=&#34;finding-the-average-color-of-a-region-of-an-image&#34;&gt;Finding the Average Color of a Region of an Image&lt;/h2&gt;
&lt;p&gt;In Part 1, you found the average color of an image.  For this part, find the average color of a region of the image array &lt;code&gt;lab&lt;/code&gt;, a starting location (&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;), and a &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;.  You need to return the same data type as in Part 1 (a dictionary with &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, and &lt;code&gt;b&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def findAverageColor(lab, x, y, width, height):
    # Your code here
    sumL, suma, sumb = 0, 0, 0
    count = 0
    for v in range(x, x + height):
        for w in range(y, y + width):
            L, a, b = lab[v][w]
            sumL += L
            suma += a
            sumb += b
            count += 1
            
    return {&#39;L&#39;: sumL/count, &#39;a&#39;: suma/count, &#39;b&#39;: sumb/count}
    
    
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;## == TEST CASES for Part 2a ==
# - This read-only cell contains test cases for your previous cell(s).
# - If this cell runs without any errors in the output, you PASSED all test cases!
# - If this cell results errors, check you previous cell, make changes, and RE-RUN your code and then this cell.
info = &#39;\N{INFORMATION SOURCE}&#39;

rgb1 = skimage.io.imread(&amp;quot;test.png&amp;quot;)
lab1 = skimage.color.rgb2lab(rgb1)
test = findAverageColor(lab1, 0, 0, 4, 4)

assert( test != None ), &amp;quot;Your findAverageColor function must return a value (right now it&#39;s returning nothing).&amp;quot;
assert( type(test) == type({}) ), f&amp;quot;Your findAverageColor function must return a dictionary (right now it&#39;s returning {type(test)}).&amp;quot;

assert( &#39;L&#39; in test ), &amp;quot;Your findAverageColor must return a value for &#39;L&#39;.&amp;quot;
assert( &#39;a&#39; in test ), &amp;quot;Your findAverageColor must return a value for &#39;a&#39;.&amp;quot;
assert( &#39;b&#39; in test ), &amp;quot;Your findAverageColor must return a value for &#39;b&#39;.&amp;quot;

print(f&amp;quot;{info} Your test.png values (0, 0) -&amp;gt; (4, 4): (L={test[&#39;L&#39;]}, a={test[&#39;a&#39;]}, b={test[&#39;b&#39;]})&amp;quot;)
assert( abs(test[&#39;L&#39;] - 54.244) &amp;gt; 0.001 ), &amp;quot;Your &#39;L&#39; value is the value of only orange pixels.  Are you sure you are visiting every pixel?&amp;quot;
assert( abs(test[&#39;a&#39;] - 59.314) &amp;gt; 0.001 ), &amp;quot;Your &#39;a&#39; value is the value of only orange pixels.  Are you sure you are visiting every pixel?&amp;quot;
assert( abs(test[&#39;b&#39;] - 52.9799) &amp;gt; 0.001 ), &amp;quot;Your &#39;b&#39; value is the value of only orange pixels.  Are you sure you are visiting every pixel?&amp;quot;

assert( abs(test[&#39;L&#39;] - 47.197) &amp;lt; 0.001 ), &amp;quot;Your &#39;L&#39; value is not correct on test.png.&amp;quot;
assert( abs(test[&#39;a&#39;] - 49.034) &amp;lt; 0.001 ), &amp;quot;Your &#39;a&#39; value is not correct on test.png.&amp;quot;
assert( abs(test[&#39;b&#39;] - 38.609) &amp;lt; 0.001 ), &amp;quot;Your &#39;b&#39; value is not correct on test.png.&amp;quot;


test2 = findAverageColor(lab1, 0, 0, 2, 2)

print(f&amp;quot;{info} Your test.png values (0, 0) -&amp;gt; (2, 2): (L={test2[&#39;L&#39;]}, a={test2[&#39;a&#39;]}, b={test2[&#39;b&#39;]})&amp;quot;)
assert( abs(test2[&#39;L&#39;] - 54.244) &amp;lt; 0.001 ), &amp;quot;Your &#39;L&#39; value is not correct on test.png when using only 2x2.&amp;quot;
assert( abs(test2[&#39;a&#39;] - 59.314) &amp;lt; 0.001 ), &amp;quot;Your &#39;a&#39; value is not correct on test.png when using only 2x2.&amp;quot;
assert( abs(test2[&#39;b&#39;] - 52.9799) &amp;lt; 0.001 ), &amp;quot;Your &#39;b&#39; value is not correct on test.png when using only 2x2.&amp;quot;



rgb3 = skimage.io.imread(&amp;quot;test3.png&amp;quot;)
lab3 = skimage.color.rgb2lab(rgb3)
test3 = findAverageColor(lab3, 0, 0, 4, 6)

print(f&amp;quot;{info} Your test3.png values (0, 0) -&amp;gt; (4, 6): (L={test3[&#39;L&#39;]}, a={test3[&#39;a&#39;]}, b={test3[&#39;b&#39;]})&amp;quot;)
assert( abs(test3[&#39;L&#39;] - 46.414) &amp;lt; 0.001 ), &amp;quot;Your &#39;L&#39; value is not correct on test3.png.&amp;quot;
assert( abs(test3[&#39;a&#39;] - 47.892) &amp;lt; 0.001 ), &amp;quot;Your &#39;a&#39; value is not correct on test3.png.&amp;quot;
assert( abs(test3[&#39;b&#39;] - 37.012) &amp;lt; 0.001 ), &amp;quot;Your &#39;b&#39; value is not correct on test3.png.&amp;quot;


## == SUCCESS MESSAGE ==
# You will only see this message (with the emoji showing) if you passed all test cases:
tada = &amp;quot;\N{PARTY POPPER}&amp;quot;
print()
print(f&amp;quot;{tada} All tests passed! {tada}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ℹ Your test.png values (0, 0) -&amp;gt; (4, 4): (L=47.19722525581813, a=49.03421116311881, b=38.60877549417687)
ℹ Your test.png values (0, 0) -&amp;gt; (2, 2): (L=54.244093289693964, a=59.3141053878179, b=52.979879933089656)
ℹ Your test3.png values (0, 0) -&amp;gt; (4, 6): (L=46.41423991872082, a=47.89200069370779, b=37.011986112075455)

🎉 All tests passed! 🎉
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;finding-the-best-match&#34;&gt;Finding the best match&lt;/h2&gt;
&lt;p&gt;In Part 1, you saved a csv file of all tile images.  For this part, you will find the best tile image given an &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, and &lt;code&gt;b&lt;/code&gt; value and your DataFrame, passed in as &lt;code&gt;df&lt;/code&gt;, in the same format as you saved in Part 1.&lt;/p&gt;
&lt;p&gt;This function must return a new DataFrame with exactly one row that contains the best match out of all of the images in &lt;code&gt;df&lt;/code&gt; based on the Euclidean distance away from the provided (&lt;code&gt;L&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;).  &lt;em&gt;(You should not remove rows from &lt;code&gt;df&lt;/code&gt; itself, as the same &lt;code&gt;df&lt;/code&gt; will be passed to you each time; make sure to assign your smallest one row to a new and differently named DataFrame.)&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
# Returns the filename for the image that is the best match given an L, a, and b value.
def findBestMatch(df, L, a, b):
    bestmatch = 10000
    name = &amp;quot;nil&amp;quot;
    for i in range(len(df)):
        diff_L = abs(df[&#39;L&#39;][i] - L)
        diff_a = abs(df[&#39;a&#39;][i] - a)
        diff_b = abs(df[&#39;b&#39;][i] - b)
        avg = pd.DataFrame([diff_L, diff_a, diff_b]).sum()
        if float(avg) &amp;lt; float(bestmatch):
            bestmatch = avg
            name = df[&amp;quot;file&amp;quot;][i]
    return df[df.file == name]
    

    
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;## == TEST CASES for Part 2b ==
# - This read-only cell contains test cases for your previous cell(s).
# - If this cell runs without any errors in the output, you PASSED all test cases!
# - If this cell results errors, check you previous cell, make changes, and RE-RUN your code and then this cell.

real_df = pd.DataFrame([
    {&#39;file&#39;: &#39;test.png&#39;, &#39;L&#39;: 47.19722525581813, &#39;a&#39;: 49.03421116311881, &#39;b&#39;: 38.60877549417687},
    {&#39;file&#39;: &#39;test2.png&#39;, &#39;L&#39;: 54.24409328969397, &#39;a&#39;: 59.3141053878179, &#39;b&#39;: 52.97987993308968},
    {&#39;file&#39;: &#39;test3.png&#39;, &#39;L&#39;: 46.41423991872082, &#39;a&#39;: 47.89200069370779, &#39;b&#39;: 37.011986112075455}
])

bestMatch = findBestMatch(real_df, 0, 0, 0)
assert(type(bestMatch) == type(pd.DataFrame())), &amp;quot;findBestMatch must return a DataFrame&amp;quot;
assert(len(bestMatch) == 1), &amp;quot;findBestMatch must return exactly one best match&amp;quot;
assert(bestMatch[&#39;file&#39;].values[0] == &#39;test3.png&#39;), &amp;quot;findBestMatch did not return the best match for test (L=0, a=0, b=0)&amp;quot;

bestMatch = findBestMatch(real_df, 47, 49, 38)
assert(bestMatch[&#39;file&#39;].values[0] == &#39;test.png&#39;), &amp;quot;findBestMatch did not return the best match for test (L=47, a=49, b=38)&amp;quot;

bestMatch = findBestMatch(real_df, 54, 49, 38)
assert(bestMatch[&#39;file&#39;].values[0] == &#39;test.png&#39;), &amp;quot;findBestMatch did not return the best match for test (L=54, a=49, b=38)&amp;quot;

bestMatch = findBestMatch(real_df, 54, 49, 52)
assert(bestMatch[&#39;file&#39;].values[0] == &#39;test2.png&#39;), &amp;quot;findBestMatch did not return the best match for test (L=54, a=49, b=52)&amp;quot;

bestMatch = findBestMatch(real_df, -100, -100, -100)
assert(bestMatch[&#39;file&#39;].values[0] == &#39;test3.png&#39;), &amp;quot;findBestMatch did not return the best match for test (L=-100, a=-100, b=-100)&amp;quot;


## == SUCCESS MESSAGE ==
# You will only see this message (with the emoji showing) if you passed all test cases:
tada = &amp;quot;\N{PARTY POPPER}&amp;quot;
print(f&amp;quot;{tada} All tests passed! {tada}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;🎉 All tests passed! 🎉
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;creating-your-mosaic&#34;&gt;Creating your mosaic!&lt;/h2&gt;
&lt;p&gt;There are two majors values you can adjust:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tilesAcross&lt;/code&gt; controls how many tiles should make up the width of the mosaic image.  The larger this number, the more tiles you will have, the better your image will look (assuming good tiles), but the slower this will run.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;outputSize&lt;/code&gt; controls the size each tile image is drawn.  The larger this number, the more detail you will have in each tile image, the more you will be able to zoom in, but the bigger the output file will be in the end.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adjust these values here:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# How many tiles across each row do you want in your final image?
# ...this number is approximate, the exact tiles will find the best match to the size of your image around this number.
tilesAcross = 200

# How big should each tile be rendered in the masaic image?
outputSize = 26
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, the following code uses your image from Part 1, your DataFrame of average colors for each image, the &lt;code&gt;findAverageColor&lt;/code&gt; function from Part 2a, and &lt;code&gt;findBestMatch&lt;/code&gt; function from Part 2b to draw a mosaic image!&lt;/p&gt;
&lt;p&gt;Make sure to add the file you want to make a mosaic out of in &lt;code&gt;base.jpg&lt;/code&gt; and run this cell:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Load the saved image data (from Part 1)
print(&amp;quot;Loading in saved average image values...&amp;quot;)
df = pd.read_csv(&#39;tile-images.csv&#39;)

# Load the moasic image:
print(&amp;quot;Loading the base.jpg image...&amp;quot;)
rgb = skimage.io.imread(&amp;quot;base.jpg&amp;quot;)
lab = skimage.color.rgb2lab(rgb)
w = len(lab)
h = len(lab[0])

# Ensure we have no half-tiles (this will cut off the edge of the photo if needed)
tileSize = int(w / tilesAcross)
w_tiles = int(w / tileSize)
h_tiles = int(h / tileSize)
w = w_tiles * tileSize
h = h_tiles * tileSize

# Create a final image of the correct size to draw the final mosaic on:
baseImage = Image.new(&#39;RGB&#39;, (outputSize * h_tiles, outputSize * w_tiles))

# Store images used to speed up processing (often once an image is used once, it will be used again):
cache = {}

print(f&amp;quot;Creating your moasic ({w_tiles} x {h_tiles} = {w_tiles * h_tiles} total tiles)...&amp;quot;)
for x in range(0, w, tileSize):
    for y in range(0, h, tileSize):
        # Find the average color for the current tile:
        tileAvgColor = findAverageColor(lab, x, y, tileSize, tileSize)
        
        # Find the best file match:
        df_bestMatch = findBestMatch(df, tileAvgColor[&#39;L&#39;], tileAvgColor[&#39;a&#39;], tileAvgColor[&#39;b&#39;])
        bestFileName = df_bestMatch[&#39;file&#39;].values[0]
        
        # load the iamge in and resize it to be a `outputSize` x `outputSize` (or get it from the cache)
        if bestFileName in cache:
            smallTile = cache[bestFileName]
        else:
            tileImage = Image.open(bestFileName)
            tileW, tileH = tileImage.size
            tileD = min(tileW, tileH)
            smallTile = tileImage.crop( (0, 0, tileD, tileD) ).resize( (outputSize, outputSize), resample=PIL.Image.LANCZOS )
            cache[bestFileName] = smallTile
        
        # Draw the tile:
        baseImage.paste(smallTile, ( int((y / tileSize) * outputSize), int((x / tileSize) * outputSize)))
        
    # Print out a progress message:
    completed = int((x / tileSize) + 1) * tileSize
    pct = completed / (w_tiles * tileSize) * 100
    sys.stdout.write(f&#39;\r  ...finished: {completed} / {w_tiles * tileSize} ({pct:.2f}%)&#39;)

# Save the image as mosaic.jpg
baseImage.save(&#39;mosaic.jpg&#39;)

# Print a message:
tada = &amp;quot;\N{PARTY POPPER}&amp;quot;
print(&amp;quot;&amp;quot;)
print(&amp;quot;&amp;quot;)
print(f&amp;quot;{tada} MOSAIC COMPLETE! {tada}&amp;quot;)
print(&amp;quot;- See mosaic.jpg to see your mosaic!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Loading in saved average image values...
Loading the base.jpg image...
Creating your moasic (206 x 161 = 33166 total tiles)...
  ...finished: 412 / 412 (100.00%)

🎉 MOSAIC COMPLETE! 🎉
- See mosaic.jpg to see your moasic!
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/img/mosaic.jpg&#34; alt=&#34;mosaic output&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a Mosaic [Part. 1]</title>
      <link>/post/mosaic01/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/post/mosaic01/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import skimage
import skimage.io
import pandas as pd

import PIL
from PIL import Image

from os import listdir
from os.path import isfile, join
import sys
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;creating-a-mosaic---part-1&#34;&gt;Creating a Mosaic - Part 1&lt;/h1&gt;
&lt;p&gt;To follow through, you can open 
&lt;a href=&#34;https://github.com/vincentoktav/vincentoktav.github.io/tree/sources/content/post/mosaic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;my&lt;/a&gt; github repository.&lt;/p&gt;
&lt;h2 id=&#34;programming&#34;&gt;Programming!&lt;/h2&gt;
&lt;p&gt;Create &lt;code&gt;findAverageImageColor&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def findAverageImageColor(fileName):
    # Your code here!
    sumL, suma, sumb = 0, 0, 0
    count = 0
    rgb = skimage.io.imread(fileName)
    lab = skimage.color.rgb2lab(rgb)
    width = len(lab)
    height = len(lab[0])
    for x in range(width):
        for y in range(height):
            L, a, b = lab[x][y]
            sumL += L
            suma += a
            sumb += b
            count += 1
            
    return {&#39;L&#39;: sumL/count, &#39;a&#39;: suma/count, &#39;b&#39;: sumb/count}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;test-cases&#34;&gt;Test Cases&lt;/h3&gt;
&lt;p&gt;These test cases help you debug your code to make sure you&amp;rsquo;re finding the correct average values for known images.  After you pass these test cases, then you&amp;rsquo;ll start using your own images! :)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;## == TEST CASES for Part 1c ==
# - This read-only cell contains test cases for your previous cell(s).
# - If this cell runs without any errors in the output, you PASSED all test cases!
# - If this cell results errors, check you previous cell, make changes, and RE-RUN your code and then this cell.
info = &#39;\N{INFORMATION SOURCE}&#39;
test = findAverageImageColor(&#39;test.png&#39;)

assert( test != None ), &amp;quot;Your findAverageImageColor function must return a value (right now it&#39;s returning nothing).&amp;quot;
assert( type(test) == type({}) ), f&amp;quot;Your findAverageImageColor function must return a dictionary (right now it&#39;s returning {type(test)}).&amp;quot;

assert( &#39;L&#39; in test ), &amp;quot;Your findAverageImageColor must return a value for &#39;L&#39;.&amp;quot;
assert( &#39;a&#39; in test ), &amp;quot;Your findAverageImageColor must return a value for &#39;a&#39;.&amp;quot;
assert( &#39;b&#39; in test ), &amp;quot;Your findAverageImageColor must return a value for &#39;b&#39;.&amp;quot;

print(f&amp;quot;{info} Your test.png values: (L={test[&#39;L&#39;]}, a={test[&#39;a&#39;]}, b={test[&#39;b&#39;]})&amp;quot;)
assert( abs(test[&#39;L&#39;] - 54.244) &amp;gt; 0.001 ), &amp;quot;Your &#39;L&#39; value is the value of only orange pixels.  Are you sure you are visiting every pixel?&amp;quot;
assert( abs(test[&#39;a&#39;] - 59.314) &amp;gt; 0.001 ), &amp;quot;Your &#39;a&#39; value is the value of only orange pixels.  Are you sure you are visiting every pixel?&amp;quot;
assert( abs(test[&#39;b&#39;] - 52.9799) &amp;gt; 0.001 ), &amp;quot;Your &#39;b&#39; value is the value of only orange pixels.  Are you sure you are visiting every pixel?&amp;quot;

assert( abs(test[&#39;L&#39;] - 47.197) &amp;lt; 0.001 ), &amp;quot;Your &#39;L&#39; value is not correct on test.png.&amp;quot;
assert( abs(test[&#39;a&#39;] - 49.034) &amp;lt; 0.001 ), &amp;quot;Your &#39;a&#39; value is not correct on test.png.&amp;quot;
assert( abs(test[&#39;b&#39;] - 38.609) &amp;lt; 0.001 ), &amp;quot;Your &#39;b&#39; value is not correct on test.png.&amp;quot;


test2 = findAverageImageColor(&#39;test2.png&#39;)

print(f&amp;quot;{info} Your test2.png values: (L={test2[&#39;L&#39;]}, a={test2[&#39;a&#39;]}, b={test2[&#39;b&#39;]})&amp;quot;)
assert( abs(test2[&#39;L&#39;] - 54.244) &amp;lt; 0.001 ), &amp;quot;Your &#39;L&#39; value is not correct on test2.png.&amp;quot;
assert( abs(test2[&#39;a&#39;] - 59.314) &amp;lt; 0.001 ), &amp;quot;Your &#39;a&#39; value is not correct on test2.png.&amp;quot;
assert( abs(test2[&#39;b&#39;] - 52.9799) &amp;lt; 0.001 ), &amp;quot;Your &#39;b&#39; value is not correct on test2.png.&amp;quot;


test3 = findAverageImageColor(&#39;test3.png&#39;)

print(f&amp;quot;{info} Your test3.png values: (L={test3[&#39;L&#39;]}, a={test3[&#39;a&#39;]}, b={test3[&#39;b&#39;]})&amp;quot;)
assert( abs(test3[&#39;L&#39;] - 46.414) &amp;lt; 0.001 ), &amp;quot;Your &#39;L&#39; value is not correct on test3.png.&amp;quot;
assert( abs(test3[&#39;a&#39;] - 47.892) &amp;lt; 0.001 ), &amp;quot;Your &#39;a&#39; value is not correct on test3.png.&amp;quot;
assert( abs(test3[&#39;b&#39;] - 37.012) &amp;lt; 0.001 ), &amp;quot;Your &#39;b&#39; value is not correct on test3.png.&amp;quot;


## == SUCCESS MESSAGE ==
# You will only see this message (with the emoji showing) if you passed all test cases:
tada = &amp;quot;\N{PARTY POPPER}&amp;quot;
print()
print(f&amp;quot;{tada} All tests passed! {tada}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ℹ Your test.png values: (L=47.19722525581813, a=49.03421116311881, b=38.60877549417687)
ℹ Your test2.png values: (L=54.24409328969397, a=59.3141053878179, b=52.97987993308968)
ℹ Your test3.png values: (L=46.41423991872082, a=47.89200069370779, b=37.011986112075455)

🎉 All tests passed! 🎉
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;your-images&#34;&gt;Your Images&lt;/h2&gt;
&lt;p&gt;Once your function works and passes all the test cases, this code loads all files in the &lt;code&gt;tile-images&lt;/code&gt; folder and stores the average color value of the image in &lt;code&gt;tile-images.csv&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This code is already complete, but depends on a correct &lt;code&gt;findAverageImageColor&lt;/code&gt; function!&lt;/li&gt;
&lt;li&gt;Make sure your code is complete before running this function!&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# What directory includes the images?
imageDir = &amp;quot;tile-images&amp;quot;

# Finds all files inside of `imageDir`:
files = [imageDir + &amp;quot;/&amp;quot; + f for f in listdir(imageDir + &amp;quot;/&amp;quot;) if isfile(join(imageDir + &amp;quot;/&amp;quot;, f))]

# Use `data` to store data about every image:
data = []

# Loop through every file:
print(f&amp;quot;Starting to process {len(files)} files...&amp;quot;)
for file in files:
    try:
        # Run `findAverageImageColor` and store the result:
        result = findAverageImageColor(file)
        d = { &#39;file&#39;: file, &#39;L&#39;: result[&#39;L&#39;], &#39;a&#39;: result[&#39;a&#39;], &#39;b&#39;: result[&#39;b&#39;] }
        data.append(d)
        pct = len(data) / len(files) * 100
        sys.stdout.write(f&amp;quot;\r  ... {len(data)} / {len(files)} total files processed ({pct:.2f}%)&amp;quot;)
    except ValueError as e:
        print(f&amp;quot;!! {file} failed to process (this can happen if the image is black/white and has no color data?)&amp;quot;)
        print(&amp;quot;...if so, remove the image and run again.&amp;quot;)
        print(repr(e))
        break
                
# Save the data as a DataFrame and CSV file:
df = pd.DataFrame(data)
df.to_csv(&#39;tile-images.csv&#39;)
df

tada = &amp;quot;\N{PARTY POPPER}&amp;quot;
print(&amp;quot;&amp;quot;)
print(&amp;quot;&amp;quot;)
print(f&amp;quot;{tada} Image data saved as &amp;quot;&amp;quot;tile-images.csv&amp;quot;&amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Starting to process 2113 files...
  ... 2113 / 2113 total files processed (100.00%)

🎉 Image data saved as tile-images.csv
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;continue-to-part-2&#34;&gt;Continue to Part 2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Part 2 will use the CSV file you saved, &lt;code&gt;tile-images.csv&lt;/code&gt;, to build your image mosaic!&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Are Sleep Trackers Effective?</title>
      <link>/post/are-sleep-trackers-effective/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      <guid>/post/are-sleep-trackers-effective/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#abstract&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Abstract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#methods&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#results&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#discussion&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5&lt;/span&gt; Discussion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#appendix&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;6&lt;/span&gt; Appendix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;div id=&#34;abstract&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Abstract&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Personal sleep tracking devices are becoming more and more popular. Statistical learning techniques are used to determine if it is possible to effectively predict time asleep from data that would be available without the aid of a sleep tracker.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Introduction&lt;/h1&gt;
&lt;p&gt;It is without question that sleep is a very important process for both learning and memory. &lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; For optimal learning, sleep, both in quality and quantity, is required before and after learning. Depending on certain demographic factors, there are different sleep prescriptions, but for adults, a minimum of seven hours is needed to avoid impairment. &lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Recently, the link between shift work and cancer has been well established. While more study is needed, there seems to be growing evidence that lack of sleep may play a strong causal role in many cancers. &lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; As the public has become more aware of the importance of sleep, the use of “smart” devices to track sleep has risen. Many sleep trackers provide a wealth of information including not only time asleep, but also details such as time spent in the various stages of sleep. (Light, deep, REM.)&lt;/p&gt;
&lt;p&gt;The effectiveness of these sleep devices is still in question. &lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; While the breadth of data that they make available is interesting, the most important by far is the total time asleep. (Asleep being defined clinically, not by simply being in bed.) The additional data, such as time in REM sleep, is interesting, however it is unclear what the target values should be, and more importantly, how we could affect change in these numbers. In contrast, there is a wealth of advice on how to increase quality and time spent asleep. &lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; If total time asleep is the only data worth tracking, is a smart device actually necessary? Is it possible to estimate time asleep based on simple metrics such as time spent in bed?&lt;/p&gt;
&lt;p&gt;Statistical learning techniques were applied to a four month sample of data from a Fitbit &lt;a href=&#34;#fn6&#34; class=&#34;footnote-ref&#34; id=&#34;fnref6&#34;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; user. Time spent in bed was used to predict total time asleep. The results indicate that this prediction can be made with a reasonably small amount of error. However, practical and statistical limitations suggest the need for further investigation.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;methods&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Methods&lt;/h1&gt;
&lt;div id=&#34;data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1&lt;/span&gt; Data&lt;/h2&gt;
&lt;p&gt;The data was accessed via the data export tool provided by Fitbit. &lt;a href=&#34;#fn7&#34; class=&#34;footnote-ref&#34; id=&#34;fnref7&#34;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt; It was collected using a Fitbit Versa 2 by a single subject, a 32 year old adult male living in Ohio and working as a professor. The Fitbit Versa 2 uses both motion and heart rate variability &lt;a href=&#34;#fn8&#34; class=&#34;footnote-ref&#34; id=&#34;fnref8&#34;&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt; to predict when the user is sleeping. The collection dates were a series of consecutive days in autumn of 2018. The two quantities of interest in the data are the time spent asleep and the time spent in bed each time the user sleeps. (A user could sleep more than once a day. For example, a two hour nap in the afternoon.) If the former can be predicted from the latter, the device seems unnecessary. (Time spent in bed could simply be tracked manually by a user. Although, it should be noted that one of the benefits of the devices is the automatic tracking of this quantity, which is probably more accurate than manual human tracking.)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;modeling&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2&lt;/span&gt; Modeling&lt;/h2&gt;
&lt;p&gt;In order to predict time asleep given time in bed, three modeling techniques were considered: linear models, k-nearest neighbors models, and tree models. No transformations were considered with the linear model. Default tuning parameters were used to train the two non-parametric models. Only time in bed was used as a predictor variable.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;evaluation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3&lt;/span&gt; Evaluation&lt;/h2&gt;
&lt;p&gt;To evaluate the ability to predict time asleep with these models, the data was split into estimation, validation, and testing sets. Because of the dependence structure of the data, that is the consecutive nature of the days, the data was split chronologically. That is, the test set is the last 20% of the data chronologically. (And similarly for the validation data.) This is done to evaluate the ability to predict future nights of sleep from past data. Error metrics and graphics are reported using the validation data in the Results section.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;results&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; Results&lt;/h1&gt;
&lt;table class=&#34;table table-striped&#34; style=&#34;width: auto !important; margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
model
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
rmse
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Linear
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.444805
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
K-Nearest Neighbors
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.692058
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Tree
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.112509
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-09-18-are-sleep-trackers-effective/index_files/figure-html/graphical-results-1.png&#34; width=&#34;1152&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;discussion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;5&lt;/span&gt; Discussion&lt;/h1&gt;
&lt;p&gt;After calculating the Rooted Mean Squared Error (RMSE) which gives us an estimate of the average squared prediction error in the original units used by the response variable for the validation data, we can see that the &lt;strong&gt;linear model&lt;/strong&gt; (without transformation) possess the lowest value of RMSE.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## [1] 9.1931&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Shown above is the value for our Test RMSE. In our linear model, the test RMSE and our validation RMSE is very similar which means there might be a little to no chance of overfit. Moreover, the plot for our linear model looks reasonable enough. Therefore, the linear model is our best model.&lt;/p&gt;
&lt;p&gt;We are trying to predict the total sleep time based only the past data and one predictor which is very hard if we do not account a seasonal factor that could potentially result in limitations of our analysis. For instance, there might be a day where the observed person is very tired thus, he only spends a very little time in bed (’time_bed’) before he fell asleep. The inability to adjust our analysis to the seasonality effects may lead to false interpretations of the results from the analysis. Therefore, due to the RMSE value and limitations, using sleep tracking devices are still the best way to track our total sleep time even though our prediction is close enough to the actual value.&lt;/p&gt;
&lt;p&gt;Future directions:
We should consider using more variable as our predictor and also put the seasonal factor into account. By doing so we might further increase the accuracy of our predicted values.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;appendix&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;6&lt;/span&gt; Appendix&lt;/h1&gt;
&lt;div id=&#34;data-dictionary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;6.1&lt;/span&gt; Data Dictionary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;start_time&lt;/code&gt; - The date and time which the device detected the user has gone to bed due to lack of motion. (But not necessarily started sleep.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end_time&lt;/code&gt; - The date and time which the device detected that the user is no longer in bed, due to motion.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min_asleep&lt;/code&gt; - The total sleep time, in minutes. This is meant to estimate a clinical measure of sleep. (Not simply time in bed.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min_awake&lt;/code&gt; - The time spent in bed, but awake, in minutes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num_awake&lt;/code&gt; - The number of times the user “awoke” during their time in bed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time_bed&lt;/code&gt; - Duration between &lt;code&gt;start_time&lt;/code&gt; and &lt;code&gt;end_time&lt;/code&gt;. The sum of &lt;code&gt;min_asleep&lt;/code&gt; and &lt;code&gt;min_awake&lt;/code&gt;. In other words, total time in bed, in minutes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min_rem&lt;/code&gt; - Total time spent in REM sleep, in minutes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min_light&lt;/code&gt; - Total time spent in light sleep, in minutes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min_deep&lt;/code&gt; - Total time spent in deep sleep, in minutes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;eda&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;6.2&lt;/span&gt; EDA&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-09-18-are-sleep-trackers-effective/index_files/figure-html/eda-plots-1.png&#34; width=&#34;1152&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;a href=&#34;http://healthysleep.med.harvard.edu/healthy/matters/benefits-of-sleep/learning-memory&#34;&gt;Harvard Medicine: Sleep, Learning, and Memory&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://www.cdc.gov/sleep/about_sleep/how_much_sleep.html&#34;&gt;CDC: How Much Sleep Do I Need?&lt;/a&gt;&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2954516/&#34;&gt;Shift Work and Cancer, The Evidence and the Challenge&lt;/a&gt;&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://www.tandfonline.com/doi/abs/10.1586/17434440.2016.1171708&#34;&gt;Consumer sleep tracking devices: a review of mechanisms, validity and utility&lt;/a&gt;&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://news.berkeley.edu/2017/10/17/whywesleep/&#34;&gt;Everything you need to know about sleep, but are too tired to ask&lt;/a&gt;&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn6&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Fitbit&#34;&gt;Wikipedia: Fitbit&lt;/a&gt;&lt;a href=&#34;#fnref6&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn7&#34;&gt;&lt;p&gt;The author would like to note that Fitbit makes it incredibly difficult for users to obtain their own data.&lt;a href=&#34;#fnref7&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn8&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://en.m.wikipedia.org/wiki/Heart_rate_variability&#34;&gt;Wikipedia: Heart rate variability&lt;/a&gt;&lt;a href=&#34;#fnref8&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
